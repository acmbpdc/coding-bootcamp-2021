{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Coding Bootcamp - 2021 This repository contains the resources for the Coding Bootcamp - 2021 organized by ACM . Overview This bootcamp will provide its audience the core foundation in this amazing field of programming. Sessions Session Topic 1 Command Line Interface 2 Overview of Programming Languages 3 Data Structures 4 Algorithms 5 Python - 1 6 Python - 2 7 Git & GitHub - 1 8 Git & GitHub - 2 Instructors This workshop is conducted by: Abshar Mohammed Aslam Ashish Kumar Jha Areeb Pasha","title":"Home"},{"location":"#coding-bootcamp-2021","text":"This repository contains the resources for the Coding Bootcamp - 2021 organized by ACM .","title":"Coding Bootcamp - 2021"},{"location":"#overview","text":"This bootcamp will provide its audience the core foundation in this amazing field of programming.","title":"Overview"},{"location":"#sessions","text":"Session Topic 1 Command Line Interface 2 Overview of Programming Languages 3 Data Structures 4 Algorithms 5 Python - 1 6 Python - 2 7 Git & GitHub - 1 8 Git & GitHub - 2","title":"Sessions"},{"location":"#instructors","text":"This workshop is conducted by: Abshar Mohammed Aslam Ashish Kumar Jha Areeb Pasha","title":"Instructors"},{"location":"01-command-line-interface/","text":"Command Line Interface Introduction The Command Line Interface (or CLI ), is a program on your device, that lets you create and delete files, navigate through folders and files, and also let you run programs, through text commands that the user enters. On Windows, it's called Command Prompt , and on Linux it's called Terminal . Why use a CLI? Although GUI (Graphical User Interface) stands out to be visually attractive and easy to navigate, CLI stands out to be way more powerful for alot more tasks. Most developers navigate through their system and run the program they build through the Command Line. Through CLI , you have full control over your system. Operating Systems such as Windows and MacOS have system protection in place, which will not allow you to perform certain tasks which are system protected. CLI also uses lesser additional system resources (as compared to a GUI ), which allows it to be faster than a GUI . Installation/Environment Please visit the links provided below for instructions in how to get started. https://www.sublimetext.com/docs/command_line.html https://developer.here.com/documentation/open-location-platform-cli/user_guide/index.html https://missing.csail.mit.edu/ https://ryanstutorials.net/bash-scripting-tutorial/ https://linuxhint.com/bash_scripting_tutorial_beginners/ https://gitlab.com/TheOuterLinux/Command-Line Basics printf The printf command is used to print output on screen. It can also be used to print in a specific format. printf \"Hello, %s!\\n\" \"World\" echo Echo is another command which can be used for displaying/printing whatever follows to the standard output (screen). echo \"Hello, world.\" Comments Anything to the right of the # is ignored by the command line interface. They are there just for you. So you know what you're doing. man man command displays the user manual entry for the command mentioned. man grep # This gives a manual about \"grep\". Press 'q' to exit cat The cat command can be used to display the contents of the file cat hello_world.txt Navigation pwd The pwd command is used to find the present working directory. pwd # Find out where you are, anytime! Directory A directory is a location for storing files on your computer. Basically, a folder. Path The path of a file or a directory describes their location on a computer. There are two types of paths: - Relative Path : It refers to the location of a file or directory, relative to the current directory (or present working directory ). - Absolute Path : It is the location of a file or a directory, relative to the root directory. Some important shorthand notations: - . refers to the current directory - .. refers to the parent of the current directory - ~ refers to the HOME directory - / refers to the root directory HOME Directory Basically, the equivalent of Desktop . ls The ls command is used to list all the files and directories in the current directory. ls Week1 Week2 README.txt It can be combined with a few different shorthands namely: ls -a This command is used to list out all files and directories along with hidden files and links to parent directories. ls -a . .. .help Week1 Week2 Week3 README.md ls -l This command is used to list out all files in long format with different columns displaying file permissions, no of files in directory, user, group and size in kb, date of creation(timestamp) and finally the file name. ls -l drwxr-xr-x 5 user21 car 4096 Jan 24 16:51 Week1 drwxr-xr-x 4 user21 car 4096 Jan 24 16:51 Week2 drwxr-xr-x 6 user21 car 4096 Jan 24 16:51 Week3 -rw-r--r-- 1 user21 car 0 Jan 24 16:51 README.md ls -t This command is used to order files by the order of modification. cd The cd is used for traversal between directories. To move from the base directory to move into the Documents directory. cd Documents If the directory we wish to explore is nested we use cd CodingBootcamp cd Week1 We can also directly access it like so cd Documents/CodingBootcamp/Week1 It can only be used to enter directories not files. The cd command is also use to traverse up directories, we do this by typing cd .. which moves up a directory. If we wish to move up multiple directories, say we are in C:/Documents/CodingBootcamp/Week1 then we go to C:/Documents/CodingBootcamp/ by typing cd .. but to go up multiple directories, say C:/Documents we type cd ../.. cd can also be used to switch directories, for example we can use it to switch between two drives C:\\ and D:\\ simply by typing cd D: to switch from drive C and vice-versa. Data mkdir The mkdir command is used to create a directory . mkdir myDirectory Create touch The touch command is used to create a file without content in Linux. It is similar to the cat command, except the fact that the file generated doesn\u2019t have any content. touch file_name touch command could be used to create multiple files using the same syntax. touch file_name_1 file_name_2 file_name_3 nano Nano is a text editor which is used to edit the files created, or create and edit the files on the go. It has an easy GUI and is a WYSIWYG (What you see is what you get) style text editor. It is present by default in many Linux distributions; however, it can be installed easily using the syntax: sudo apt install nano After that, just create and open a new file using the syntax: nano myFile This opens the nano text editor for editing the file specified in the command ( myFile in this case ). It has a list of shortcut keys at the bottom as well. vi vi or the visual editor for unix is another text editor that we use similar to the nano . The syntax to create and start editing a given file is as follows: vi file_name After the window opens, you need to hit the i on your keyboard to start inserting into the editor. To exit the command mode, press esc key and hit the : key. Then type wq to quit and save whatever changes you made to the document. To simply quit, just type q instead of wq . So, vi and nano are kind of similar. Nano has a pseudo-graphical layout that makes it a little easier to jump right into. Both are viable options. Vi is a standard whereas Nano has to be available depending on the Linux OS you use. Organize mv The mv command let's you move files or directories from one place to another. mv myFile dest/myFile # Moves myFile from current directory to the folder \"dest\" in the current directory It is also used to rename files. mv file1.txt file2.txt # file1.txt is renamed as file2.txt It even supports moving multiple files or directories at once. mv file1.txt file2.txt myFolder/ # Moves file1.txt, file2.txt to myFolder cp The cp command is used to copy files or directories. cp stones.txt rocks.txt # Creates a copy of \"stones.txt\" as \"rocks.txt\" You could also copy multiple files into a directory. cp file1.txt file2.txt myFolder # Copies file1.txt and file2.txt to myFolder rm The rm command is used to delete files. rm file1.txt # Deletes the file1.txt rmdir While the rm command is used to delete files, rmdir command is used to delete directories. rmdir myDir You can also delete a directory recursively by using the following command: rm -rf myDir # -r: recursion, -f: force Extract wc The wc command or the word count command is used, as its name suggests, to get the counts. It can be used to get the number of lines, word counts, byte and character count. It has a syntax that follows the format: wc [option] \u2026 [file]\u2026 The default syntax, without using any extra options is as follows: Example: family.txt : Thanos Nebula Gamora stones.txt : power soul space reality time mind Entering the command: wc stones.txt 1 6 35 stones.txt We can give multiple file names as input and get the combined as well as individual outputs for them. wc stones.txt family.txt 1 6 35 stones.txt 1 3 21 family.txt 2 9 56 total Options : Adding the -l option, gives you the number of lines in the file. Adding the -w option, gives you the number of words in the file. grep grep command is used to search for a specific string in a given file. GREP stands for Global Regular Expression Print . It has a simple syntax given by: grep string_to_search file_to_search_from Piping Piping commands enables the output of one command to be used as the input for another. Syntax : command_1 | command_2 | command_3 | .... | command_N Example: echo \"Hello world!\" | wc 1 2 13 Security chmod chmod is used to change directory permissions in Linux. There are a few rules that are present that help manage permissions. To add readable, writable and executable permissions to a directory, we use 'r'(read), 'w'(write) and 'x'(execute). * - indicates a file * l indicates a link * d indicates a directory chmod +rwx filename to add permissions. chmod -rwx directoryname to remove permissions. chmod +x filename to allow executable permissions. chmod -wx filename to take out write and executable permissions. Directory Permissions for Group Owners and Others: The command for changing directory permissions for group owners is similar, but add a g for group or o for users. For example: chmod g+w filename chmod g-wx filename chmod o+w filename chmod o-rwx foldername How to Change Permissions in Numeric Code in Linux? 0 = No Permission 1 = Execute 2 = Write 4 = Read Basically, you add up the numbers depending on the level of permission you want to give. The permission numbers are listed below: 0 = --- 1 = --x 2 = -w- 3 = -wx 4 = r- 5 = r-x 6 = rw- 7 = rwx Here are some examples : chmod 777 foldername will give read, write, and execute permissions for everyone. chmod 700 foldername will give read, write, and execute permissions for the user only. chmod 327 foldername will give write and execute (3) permission for the user, write (2) for the group, and read, write, and execute for the users. whoami It displays the username of the current user when this command is invoked whoami sudo Sudo stands for SuperUser DO and is used to access restricted files and operations sudo command Replace command with the command you wish to use history Use the history command to see your recently executed commands history 3 # displays last 3 commands Test Yourself Let's start creating a directory to store blogs! But first, I'll need a directory to store my files ( Let's call the directory MyAmazingJourneyThroughTheCB ) \ud83e\udd14 Woohoo! We are done creating the directory to store our text file blogs. How do I go into the directory now? Oops. You know what, let's just call our ACMOP \ud83d\udd25. How do I go back to where I came from and rename my directory? Okay, we are good to go now folks! Let's start by creating our first blog file. How do I create a text file named About.txt ? How do I write into this file? Let's check the first 3 lines in the file. Hmm, I wonder how would I do that? OKAY, I'M HAVING A CRISIS RIGHT NOW! WHO AM I? WHERE AM I? Phew, it's all cool. Just to check, what all files do I have in my directory now? Let's try to analyse the blog we just wrote. The ( weird ) blog website only accepts files of maximum 5 lines, 1000 words, and 5000 characters. How would I check this? Let's look at the number times ACM was mentioned in the file. What's next? Here are some Github repositories that you can make use of for additional information. Upgrade your Terminal ZSH OhMyZSH Powerlevel10k Resources Documentation Bash Scripting for Beginners Intro to Command Line Courses CLI Crash Course - freeCodeCamp Websites What is CLI? - W3Schools CLI Cheatsheet - Git Tower Command Line Reference - Microsoft","title":"1: Command Line Interface"},{"location":"01-command-line-interface/#command-line-interface","text":"","title":"Command Line Interface"},{"location":"01-command-line-interface/#introduction","text":"The Command Line Interface (or CLI ), is a program on your device, that lets you create and delete files, navigate through folders and files, and also let you run programs, through text commands that the user enters. On Windows, it's called Command Prompt , and on Linux it's called Terminal .","title":"Introduction"},{"location":"01-command-line-interface/#why-use-a-cli","text":"Although GUI (Graphical User Interface) stands out to be visually attractive and easy to navigate, CLI stands out to be way more powerful for alot more tasks. Most developers navigate through their system and run the program they build through the Command Line. Through CLI , you have full control over your system. Operating Systems such as Windows and MacOS have system protection in place, which will not allow you to perform certain tasks which are system protected. CLI also uses lesser additional system resources (as compared to a GUI ), which allows it to be faster than a GUI .","title":"Why use a CLI?"},{"location":"01-command-line-interface/#installationenvironment","text":"Please visit the links provided below for instructions in how to get started. https://www.sublimetext.com/docs/command_line.html https://developer.here.com/documentation/open-location-platform-cli/user_guide/index.html https://missing.csail.mit.edu/ https://ryanstutorials.net/bash-scripting-tutorial/ https://linuxhint.com/bash_scripting_tutorial_beginners/ https://gitlab.com/TheOuterLinux/Command-Line","title":"Installation/Environment"},{"location":"01-command-line-interface/#basics","text":"","title":"Basics"},{"location":"01-command-line-interface/#printf","text":"The printf command is used to print output on screen. It can also be used to print in a specific format. printf \"Hello, %s!\\n\" \"World\"","title":"printf"},{"location":"01-command-line-interface/#echo","text":"Echo is another command which can be used for displaying/printing whatever follows to the standard output (screen). echo \"Hello, world.\"","title":"echo"},{"location":"01-command-line-interface/#comments","text":"Anything to the right of the # is ignored by the command line interface. They are there just for you. So you know what you're doing.","title":"Comments"},{"location":"01-command-line-interface/#man","text":"man command displays the user manual entry for the command mentioned. man grep # This gives a manual about \"grep\". Press 'q' to exit","title":"man"},{"location":"01-command-line-interface/#cat","text":"The cat command can be used to display the contents of the file cat hello_world.txt","title":"cat"},{"location":"01-command-line-interface/#navigation","text":"","title":"Navigation"},{"location":"01-command-line-interface/#pwd","text":"The pwd command is used to find the present working directory. pwd # Find out where you are, anytime!","title":"pwd"},{"location":"01-command-line-interface/#directory","text":"A directory is a location for storing files on your computer. Basically, a folder.","title":"Directory"},{"location":"01-command-line-interface/#path","text":"The path of a file or a directory describes their location on a computer. There are two types of paths: - Relative Path : It refers to the location of a file or directory, relative to the current directory (or present working directory ). - Absolute Path : It is the location of a file or a directory, relative to the root directory. Some important shorthand notations: - . refers to the current directory - .. refers to the parent of the current directory - ~ refers to the HOME directory - / refers to the root directory","title":"Path"},{"location":"01-command-line-interface/#home-directory","text":"Basically, the equivalent of Desktop .","title":"HOME Directory"},{"location":"01-command-line-interface/#ls","text":"The ls command is used to list all the files and directories in the current directory. ls Week1 Week2 README.txt It can be combined with a few different shorthands namely:","title":"ls"},{"location":"01-command-line-interface/#ls-a","text":"This command is used to list out all files and directories along with hidden files and links to parent directories. ls -a . .. .help Week1 Week2 Week3 README.md","title":"ls -a"},{"location":"01-command-line-interface/#ls-l","text":"This command is used to list out all files in long format with different columns displaying file permissions, no of files in directory, user, group and size in kb, date of creation(timestamp) and finally the file name. ls -l drwxr-xr-x 5 user21 car 4096 Jan 24 16:51 Week1 drwxr-xr-x 4 user21 car 4096 Jan 24 16:51 Week2 drwxr-xr-x 6 user21 car 4096 Jan 24 16:51 Week3 -rw-r--r-- 1 user21 car 0 Jan 24 16:51 README.md","title":"ls -l"},{"location":"01-command-line-interface/#ls-t","text":"This command is used to order files by the order of modification.","title":"ls -t"},{"location":"01-command-line-interface/#cd","text":"The cd is used for traversal between directories. To move from the base directory to move into the Documents directory. cd Documents If the directory we wish to explore is nested we use cd CodingBootcamp cd Week1 We can also directly access it like so cd Documents/CodingBootcamp/Week1 It can only be used to enter directories not files. The cd command is also use to traverse up directories, we do this by typing cd .. which moves up a directory. If we wish to move up multiple directories, say we are in C:/Documents/CodingBootcamp/Week1 then we go to C:/Documents/CodingBootcamp/ by typing cd .. but to go up multiple directories, say C:/Documents we type cd ../.. cd can also be used to switch directories, for example we can use it to switch between two drives C:\\ and D:\\ simply by typing cd D: to switch from drive C and vice-versa.","title":"cd"},{"location":"01-command-line-interface/#data","text":"","title":"Data"},{"location":"01-command-line-interface/#mkdir","text":"The mkdir command is used to create a directory . mkdir myDirectory","title":"mkdir"},{"location":"01-command-line-interface/#create","text":"","title":"Create"},{"location":"01-command-line-interface/#touch","text":"The touch command is used to create a file without content in Linux. It is similar to the cat command, except the fact that the file generated doesn\u2019t have any content. touch file_name touch command could be used to create multiple files using the same syntax. touch file_name_1 file_name_2 file_name_3","title":"touch"},{"location":"01-command-line-interface/#nano","text":"Nano is a text editor which is used to edit the files created, or create and edit the files on the go. It has an easy GUI and is a WYSIWYG (What you see is what you get) style text editor. It is present by default in many Linux distributions; however, it can be installed easily using the syntax: sudo apt install nano After that, just create and open a new file using the syntax: nano myFile This opens the nano text editor for editing the file specified in the command ( myFile in this case ). It has a list of shortcut keys at the bottom as well.","title":"nano"},{"location":"01-command-line-interface/#vi","text":"vi or the visual editor for unix is another text editor that we use similar to the nano . The syntax to create and start editing a given file is as follows: vi file_name After the window opens, you need to hit the i on your keyboard to start inserting into the editor. To exit the command mode, press esc key and hit the : key. Then type wq to quit and save whatever changes you made to the document. To simply quit, just type q instead of wq . So, vi and nano are kind of similar. Nano has a pseudo-graphical layout that makes it a little easier to jump right into. Both are viable options. Vi is a standard whereas Nano has to be available depending on the Linux OS you use.","title":"vi"},{"location":"01-command-line-interface/#organize","text":"","title":"Organize"},{"location":"01-command-line-interface/#mv","text":"The mv command let's you move files or directories from one place to another. mv myFile dest/myFile # Moves myFile from current directory to the folder \"dest\" in the current directory It is also used to rename files. mv file1.txt file2.txt # file1.txt is renamed as file2.txt It even supports moving multiple files or directories at once. mv file1.txt file2.txt myFolder/ # Moves file1.txt, file2.txt to myFolder","title":"mv"},{"location":"01-command-line-interface/#cp","text":"The cp command is used to copy files or directories. cp stones.txt rocks.txt # Creates a copy of \"stones.txt\" as \"rocks.txt\" You could also copy multiple files into a directory. cp file1.txt file2.txt myFolder # Copies file1.txt and file2.txt to myFolder","title":"cp"},{"location":"01-command-line-interface/#rm","text":"The rm command is used to delete files. rm file1.txt # Deletes the file1.txt","title":"rm"},{"location":"01-command-line-interface/#rmdir","text":"While the rm command is used to delete files, rmdir command is used to delete directories. rmdir myDir You can also delete a directory recursively by using the following command: rm -rf myDir # -r: recursion, -f: force","title":"rmdir"},{"location":"01-command-line-interface/#extract","text":"","title":"Extract"},{"location":"01-command-line-interface/#wc","text":"The wc command or the word count command is used, as its name suggests, to get the counts. It can be used to get the number of lines, word counts, byte and character count. It has a syntax that follows the format: wc [option] \u2026 [file]\u2026 The default syntax, without using any extra options is as follows: Example: family.txt : Thanos Nebula Gamora stones.txt : power soul space reality time mind Entering the command: wc stones.txt 1 6 35 stones.txt We can give multiple file names as input and get the combined as well as individual outputs for them. wc stones.txt family.txt 1 6 35 stones.txt 1 3 21 family.txt 2 9 56 total Options : Adding the -l option, gives you the number of lines in the file. Adding the -w option, gives you the number of words in the file.","title":"wc"},{"location":"01-command-line-interface/#grep","text":"grep command is used to search for a specific string in a given file. GREP stands for Global Regular Expression Print . It has a simple syntax given by: grep string_to_search file_to_search_from","title":"grep"},{"location":"01-command-line-interface/#piping","text":"Piping commands enables the output of one command to be used as the input for another. Syntax : command_1 | command_2 | command_3 | .... | command_N Example: echo \"Hello world!\" | wc 1 2 13","title":"Piping"},{"location":"01-command-line-interface/#security","text":"","title":"Security"},{"location":"01-command-line-interface/#chmod","text":"chmod is used to change directory permissions in Linux. There are a few rules that are present that help manage permissions. To add readable, writable and executable permissions to a directory, we use 'r'(read), 'w'(write) and 'x'(execute). * - indicates a file * l indicates a link * d indicates a directory chmod +rwx filename to add permissions. chmod -rwx directoryname to remove permissions. chmod +x filename to allow executable permissions. chmod -wx filename to take out write and executable permissions. Directory Permissions for Group Owners and Others: The command for changing directory permissions for group owners is similar, but add a g for group or o for users. For example: chmod g+w filename chmod g-wx filename chmod o+w filename chmod o-rwx foldername How to Change Permissions in Numeric Code in Linux? 0 = No Permission 1 = Execute 2 = Write 4 = Read Basically, you add up the numbers depending on the level of permission you want to give. The permission numbers are listed below: 0 = --- 1 = --x 2 = -w- 3 = -wx 4 = r- 5 = r-x 6 = rw- 7 = rwx Here are some examples : chmod 777 foldername will give read, write, and execute permissions for everyone. chmod 700 foldername will give read, write, and execute permissions for the user only. chmod 327 foldername will give write and execute (3) permission for the user, write (2) for the group, and read, write, and execute for the users.","title":"chmod"},{"location":"01-command-line-interface/#whoami","text":"It displays the username of the current user when this command is invoked whoami","title":"whoami"},{"location":"01-command-line-interface/#sudo","text":"Sudo stands for SuperUser DO and is used to access restricted files and operations sudo command Replace command with the command you wish to use","title":"sudo"},{"location":"01-command-line-interface/#history","text":"Use the history command to see your recently executed commands history 3 # displays last 3 commands","title":"history"},{"location":"01-command-line-interface/#test-yourself","text":"Let's start creating a directory to store blogs! But first, I'll need a directory to store my files ( Let's call the directory MyAmazingJourneyThroughTheCB ) \ud83e\udd14 Woohoo! We are done creating the directory to store our text file blogs. How do I go into the directory now? Oops. You know what, let's just call our ACMOP \ud83d\udd25. How do I go back to where I came from and rename my directory? Okay, we are good to go now folks! Let's start by creating our first blog file. How do I create a text file named About.txt ? How do I write into this file? Let's check the first 3 lines in the file. Hmm, I wonder how would I do that? OKAY, I'M HAVING A CRISIS RIGHT NOW! WHO AM I? WHERE AM I? Phew, it's all cool. Just to check, what all files do I have in my directory now? Let's try to analyse the blog we just wrote. The ( weird ) blog website only accepts files of maximum 5 lines, 1000 words, and 5000 characters. How would I check this? Let's look at the number times ACM was mentioned in the file.","title":"Test Yourself"},{"location":"01-command-line-interface/#whats-next","text":"Here are some Github repositories that you can make use of for additional information.","title":"What's next?"},{"location":"01-command-line-interface/#upgrade-your-terminal","text":"ZSH OhMyZSH Powerlevel10k","title":"Upgrade your Terminal"},{"location":"01-command-line-interface/#resources","text":"","title":"Resources"},{"location":"01-command-line-interface/#documentation","text":"Bash Scripting for Beginners Intro to Command Line","title":"Documentation"},{"location":"01-command-line-interface/#courses","text":"CLI Crash Course - freeCodeCamp","title":"Courses"},{"location":"01-command-line-interface/#websites","text":"What is CLI? - W3Schools CLI Cheatsheet - Git Tower Command Line Reference - Microsoft","title":"Websites"},{"location":"02-overview-of-programming-languages/","text":"Overview of Programming Languages Introduction HTML, CSS and Javascript are languages that are used to create websites. HTML provides the structure for any website. CSS is used to style the webpage and Javascript HTML provides the structure for any website CSS is used to style the website Javascript add functionality to the website Code Editors VS Code Atom Sublime Text HTML HTML stands for Hyper Text Markup Language. It is used to create web pages. It describes the overall structure and the necessary elements of the webpage. HTML elements tell the browser how to display the content. Example <!DOCTYPE html> <html> <head> <title>Page Title</title> </head> <body> <h1>My First Heading</h1> <p>My first paragraph.</p> </body> </html> There are many elements that are available within HTML. You can learn more about them from the resources mentioned below. HTML Resources HTML Crash Course HTML Tutorials CSS CSS stands for Cascading Style Sheets. CSS is used to design websites and and animation Example of CSS /* CHange background color */ body { background-color: lightblue; } /* Changes the color and alignment of the h1 tag */ h1 { color: white; text-align: center; } /* Change the font style and size */ p { font-family: verdana; font-size: 20px; } Linking CSS: Internal : An internal CSS is defined in the head section of an HTML page, within a style element. <!DOCTYPE html> <html> <head> <style> body {background-color: powderblue;} h1 {color: blue;} p {color: red;} </style> </head> <body> <h1>This is a heading</h1> <p>This is a paragraph.</p> </body> </html> External : An external style sheet is used to define the style for many HTML pages. To use an external style sheet, add a link to it in the <head> section of each HTML page. In this method all the styles are in an external file. We create an index.html file and styles.css file. index.html : <!DOCTYPE html> <html> <head> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <h1>This is a heading</h1> <p>This is a paragraph.</p> </body> </html> styles.css : body { background-color: powderblue; } h1 { color: blue; } p { color: red; } Any styles added to this will reflect in the webpage. CSS Resources: CSS Crash Course CSS Documentation Javascript Javascript is used to add functionality to websites. Example // the hello world program console.log('Hello World'); Resources to learn Javascript : JS Course JS Documentation A Simple Website <!DOCTYPE html> <head> <title>HTML and CSS \"Hello World\"</title> <style> body { background-color: #2D2D2D; } h1 { color: #C26356; font-size: 30px; font-family: Menlo, Monaco, fixed-width; } p { color: white; font-family: \"Source Code Pro\", Menlo, Monaco, fixed-width; } </style> </head> <body> <h1>Hello World Example</h1> <p>This is a very basic \"Hello World\" example made up in HTML and CSS. See if you can change the size of the header text above.</p> </body> </html> Frameworks Frameworks make web development easy and quick. Here are some of the most popular web frameworks for HTML, CSS and JS. CSS Tailwind CSS Bootstrap Bulma Purecss Semantic UI JavaScript React Angular Vue BONUS You can find what technologies are present in a website. These sites breakdown the technologies used in a website. Builtwith SimilarTech Basics to C The C programming language is a procedural programming language. Dennis Ritchie created it as a system programming language for writing operating systems. Low-level memory access, a small collection of keywords, and a clean style are all qualities that make C language excellent for system programming, such as operating system or compiler development. Structure of a C Program C follows a particular structure that the source code should be written as. Not following this structure would lead to a Compilation Error // Headers #include <stdio.h> int main() { // main() functions int session_number = 2; // Body of the main() function printf(\"%d\", a); return 0; // Return } Header Files : The first and most important component in the structure of a C program is the inclusion of the Header files, to run the C Program. Header File A header file (.h) is a file that includes C function declarations and macro definitions that can be shared across several source files. Here are some of the header files which are commonly used in C Language: Header Files Description stdio.h Input/Output conio.h Console Input/Output Functions stdlib.h General Utility Functions string.h String Functions math.h Math Functions main() Function : The next step in writing a C Program is to declare the main() function. int main(){ } Body : The body of a C program, refers to the operations that are performed in its functions. int main(){ int members = 200; printf(\"%d\", members); } Return Statement : The return statement depends upon the return type of your function. In the example we had above, main() function has the return type int . Hence, once we are done executing that function, we should return an int value from the function. Hello World in C WOOHOO! You are ready to write your first program in C. Let's write a program that would print \" Hello World! \" onto the screen. #include<stdio.h> int main(){ printf(\"Hello World!\"); return 0; } Data Types The follwoing table represents the data type in C programming language: Data Type Storage Size Value Range char 1 byte -128 to 127 or 0 to 255 unsigned char 1 byte 0 to 255 signed char 1 byte -128 to 127 int 2 bytes -32,768 to 32,767 unsigned int 2 bytes 0 to 65,535 short 2 bytes -32,768 to 32,767 unsigned short 2 bytes 0 to 65,535 long 8 bytes -9223372036854775808 to 9223372036854775807 unsigned long 8 bytes 0 to 18446744073709551615 float 4 byte 1.2E-38 to 3.4E+38 double 8 byte 2.3E-308 to 1.7E+308 long double 10 byte 3.4E-4932 to 1.1E+4932 printf() and scanf() in C The printf() and scanf() functions are used for input and output in C language. Both functions are inbuilt library functions, defined in stdio.h (header file). printf() function The printf() function is used for output. It prints the given statement to the console. The syntax of printf() function is given below: printf(\"format string\",argument_list); The format string can be %d (integer), %c (character), %s (string), %f (float) etc. scanf() function The scanf() function is used for input. It reads the input data from the console. scanf(\"format string\",argument_list); Program to print cube of given number Let's see a simple example of c language that gets input from the user and prints the cube of the given number. #include<stdio.h> int main(){ int number; printf(\"enter a number:\"); scanf(\"%d\",&number); printf(\"cube of number is:%d \",number*number*number); return 0; } C Operators An operator is simply a symbol that is used to perform operations. There can be many types of operations like arithmetic, logical, bitwise, etc. There are following types of operators to perform different types of operations in C language. Arithmetic Operators Relational Operators Shift Operators Logical Operators Bitwise Operators Ternary or Conditional Operators Assignment Operator Misc Operator Category Operator Associativity Postfix () [] -> . ++ - - Left to right Unary + - ! ~ ++ - - (type)* & sizeof Right to left Multiplicative * / % Left to right Additive + - Left to right Shift << >> Left to right Relational < <= > >= Left to right Equality == != Left to right Bitwise AND & Left to right Bitwise XOR ^ Left to right Bitwise OR | Left to right Logical AND && Left to right Logical OR || Left to right Conditional ?: Right to left Assignment = += -= *= /= %=>>= <<= &= ^= = Comma , Left to right Control Flow C supports the usual logical conditions from mathematics: Less than: a < b Less than or equal to: a <= b Greater than: a > b Greater than or equal to: a >= b Equal to a == b Not Equal to a != b C has the following conditional statements: Use if to specify a block of code to be executed, if a specified condition is true Use else to specify a block of code to be executed, if the same condition is false Use else if to specify a new condition to test, if the first condition is false Use switch to specify many alternative blocks of code to be executed If Statement Use the if statement to specify a block of Java code to be executed if a condition is true . if (20 > 18) { printf(\"20 is greater than 18\"); } // Outputs \"20 is greater than 18\" Else Statement Use the else statement to specify a block of C code to be executed if a condition is false . int time = 20; if (time < 18) { printf(\"Good day.\"); } else { printf(\"Good evening.\"); } // Outputs \"Good evening.\" Else If Statement Use the else if statement to specify a new condition if the first condition is false . int time = 22; if (time < 10) { printf(\"Good morning.\"); } else if (time < 20) { printf(\"Good day.\"); } else { printf(\"Good evening.\"); } // Outputs \"Good evening.\" Ternary Operator There is also a short-hand if else, which is known as the ternary operator because it consists of three operands. It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements: //variable = (condition) ? expressionTrue : expressionFalse; int time = 20; char[] result = (time < 18) ? \"Good day.\" : \"Good evening.\"; printf(\"%s\",result); Switch Statement Use the switch statement to select one of many code blocks to be executed. Syntax : switch(expression) { case x: // code block break; case y: // code block break; default: // code block } This is how it works: The switch expression is evaluated once. The value of the expression is compared with the values of each case . If there is a match, the associated block of code is executed. The break and default keywords are optional, and will be described later in this chapter The example below uses the weekday number to calculate the weekday name:` int day = 4; switch (day) { case 1: printf(\"Monday\"); break; case 2: printf(\"Tuesday\"); break; case 3: printf(\"Wednesday\"); break; case 4: printf(\"Thursday\"); break; case 5: printf(\"Friday\"); break; case 6: printf(\"Saturday\"); break; case 7: printf(\"Sunday\"); break; } // Outputs \"Thursday\" (day 4) Loops in C While Loop The while loop loops through a block of code as long as a specified condition is true . In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5: int i = 0; while (i < 5) { printf(\"%d\\n\",i); i++; } Do/While Loop The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true. The example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested: int i = 0; do { printf(\"%d\\n\",i); i++; } while (i < 5); For Loop When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop. Syntax for (statement 1; statement 2; statement 3) { // code block to be executed } Statement 1 is executed (one time) before the execution of the code block. Statement 2 defines the condition for executing the code block. Statement 3 is executed (every time) after the code block has been executed. The example below will print the numbers 0 to 4: for (int i = 0; i < 5; i++) { printf(\"%d\",i); } Functions A function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function. Functions are used to perform certain actions, and they are also known as methods . Why use functions? To reuse code: define the code once, and use it many times. Creating A Function A function is defined with a certain name, followed by parentheses () . C provides some pre-defined methods, such as printf() , but you can also create your own functions to perform certain actions: return_type function_name(data_type parameter...){ //code to be executed } Calling A Function To call a function in C, write the function's name followed by two parentheses () and a semicolon ; Let's see a simple example of C function that doesn't return any value from the function. Example without return value: void hello(){ printf(\"hello c\"); } If you want to return any value from the function, you need to use any data type such as int, long, char, etc. The return type depends on the value to be returned from the function. Let's see a simple example of C function that returns int value from the function. Example with return value: int get(){ return 10; } In the above example, we have to return 10 as a value, so the return type is int. If you want to return floating-point value (e.g., 10.2, 3.1, 54.5, etc), you need to use float as the return type of the method. Program to calculate the average of five numbers. #include<stdio.h> void average(int, int, int, int, int); void main() { int a,b,c,d,e; printf(\"\\nGoing to calculate the average of five numbers:\"); printf(\"\\nEnter five numbers:\"); scanf(\"%d %d %d %d %d\",&a,&b,&c,&d,&e); average(a,b,c,d,e); } void average(int a, int b, int c, int d, int e) { float avg; avg = (a+b+c+d+e)/5; printf(\"The average of given five numbers : %f\",avg); } Arrays Think about a situation where you want to store the names of every student in your batch? Don't you think it is a little too much work in assigning a name to one variable? That is where arrays come! An array (in any programming language) is collection of similar data types, stored at continuous memory locations, under one variable name. Declaration of Arrays There are three main ways how you could declare an array: By size : You could declare an array by mentioning just the size of elements you want in an array. int marks[5]; int items = 10 int price_canteen[items]; By initialising the elements : You could declare an array by initialising the elements in the array (without the size). int marks[] = {90, 84, 68, 71, 45}; By initialising the elements (with size) : You could otherwise declare an array by initialising the elements in the array (with size). float price_canteen[4] = {4, 12.5, 11, 6}; Accessing the elements The elements in the array are accessed using its index position. The index of the elements in the array go from 0 ( first element ) to n-1 ( last element ). char vowels[] = {'a', 'e', 'i', 'o', 'u'}; printf(\"%c\", vowels[1]); Strings As we don't have a predefined data type in C which we could use to initialise strings, we use character arrays which acts the same any string would do. char strongest_avenger[] = {'s','h','a','k','t','i','m','a','n'}; char name[] = \"Karen\"; printf(\"%s\", name); char str[50]; scanf(\"%s\", str); Multi-dimensional Arrays What about a table? What about a matrix? How do I store that in C? Yep, multi-dimensional arrays . int height_weight [2][2]; In the above example, we create an multi-dimensional array called height_weight , which has 2 rows and 2 columns. You could declare the multi-dimensional array, the same way you do with normal ( 1-D ) arrays as well. int height_weight [2][2] = {{3, 60}, {2, 80}}; You could create an array of strings using multi-dimensional arrays. char cool_people[5][10] = { \"Bheem\", \"Raju\", \"Chutki\", \"Dolu\", \"Bolu\" }; Object Oriented Programming System Using JAVA Why OOPS \ud83e\udd14?! Object-oriented programming based on the main features that are: Abstraction: It helps in letting the useful information or relevant data to a user, increasing the program\u2019s efficiency and making things simple. Inheritance: It helps in inheriting the methods, functions, properties, and fields of a base class in the derived class. Polymorphism: It helps in doing one task in many ways with the help of overloading and overriding, which is also known as compile-time and run-time polymorphism, respectively. Encapsulation: It helps in hiding irrelevant data from a user and prevents the user from unauthorized access. Object-oriented programming languages are C++, C#, Java, Python, Ruby, PHP, Perl, Objective-C, Swift, Dart, Lisp, etc. In an object-oriented application, objects can be easily reused in another application. New objects can be easily created for the same class, and code can be easily maintained and altered. It also has the feature of memory management. It provides a great benefit in designing large programs, which can be easily divided into smaller parts and helps in distinguishing the components or phases that need to be executed or planned in a certain way. Functional Programming Vs OOPS Why Java \ud83e\udd14?! 97% of Enterprise Desktops run Java. 89% of Desktops (or Computers) in the U.S. run Java. 9 Million Java Developers worldwide. Java is the number 1 choice for developers. Java continues to be the most used development platform. 3 billion mobile phones run Java. 100% of Blu-ray Disc Players ship with Java. There are currently over 5 billion Java Cards in use. 125 million TV devices run Java. 5 of the Top 5 Original Equipment Manufacturers Ship Java ME Installation Java SE 16 Go to the ORACLE JAVA website Click on the Download java button Got to the appropeiate section based on your operating system Download the appropriate jdk (Java Development Kit) version Once the download completes, click on the installer and run the setup Make sure to add the path of the jdk file to your environment variables To check the installation open the command prompt and type the following C:\\Users\\jhaas>java --version If installed correctly, the output should look like the following: java 16.0.2 2021-07-20 Java(TM) SE Runtime Environment (build 16.0.2+7-67) Java Hotspot(TM) 64-Bit Server VM (build 16.0.2+7-67, mixed mode, sharing) Open a text editor of your choice and proceed to write your first Java Code!! \ud83d\ude4c\ud83c\udf89\u2728 Getting Started Object Any entity that has state and behavior is known as an object. For example, a chair, pen, table, keyboard, bike, etc. It can be physical or logical. Example: A dog is an object because it has states like color, name, breed, etc. as well as behaviors like wagging the tail, barking, eating, etc. Class Collection of objects is called class. It is a logical entity. A class can also be defined as a blueprint from which you can create an individual object. Class doesn't consume any space. A class in Java can contain: Fields Methods Constructors Blocks Nested class and interface class <class_name>{ field; method; } Methods In Java, a method is like a function which is used to expose the behavior of an object. Advantage of Method - Code Reusability - Code Optimization First Java Program Open a text editor of your choice (notepad++, vscode, etc) Declare a class (Name of class containing the main function, should be the name of the program, for example, if the name of the class containing the main function is Test , then name of the file must be Test.java ) class Test{ public static void main (String args[]){ System.out.println(\"Hello World\") } } Save the file for Java Hello World program as Test.java Open the command prompt. Go to Directory where the program has been saved. Compile the code of your Hello world Java program using command, C:\\Users\\jhaas>javac Test.java If you look in your working folder, you can see that a file named Test.class has been created. To execute the code, enter the command java followed by the class name, as expected output Hello World is displayed now. C:\\Users\\jhaas>java Test Hello World Comments Write single line comments using // ```java // This is a comment System.out.println(\"Hello World\"); Multi-line comments start with `/*` and ends with `*/`. ```java /* The code below will print the words Hello World to the screen, and it is amazing */ System.out.println(\"Hello World\"); Data Types In Java, there are different types of variables, for example: String - stores text, such as \"Hello\". String values are surrounded by double quotes int - stores integers (whole numbers), without decimals, such as 123 or -123 float - stores floating point numbers, with decimals, such as 19.99 or -19.99 char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes boolean - stores values with two states: true or false Declaring Variables To create a variable, you must specify the type and assign it a value: String name = \"ACM\"; int myNum = 15; int myNum2; myNum2 = 15; Data Types As explained in the previous section, a variable in Java must be a specified data type: int myNum = 5; // Integer (whole number) float myFloatNum = 5.99f; // Floating point number char myLetter = 'D'; // Character boolean myBool = true; // Boolean String myText = \"Hello\"; // String Primitive Data Types Data Type Description Size byte Stores whole numbers from -128 to 127 1 byte short Stores whole numbers from -32,768 to 32,767 2 bytes int Stores whole numbers from -2,147,483,648 to 2,147,483,647 4 bytes long Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 8 bytes float Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits 4 bytes double Stores fractional numbers. Sufficient for storing 15 decimal digits 8 bytes boolean Stores true or false values 1 bit char Stores a single character/letter or ASCII values 2 bytes Operators Operators are used to perform operations on variables and values. In the example below, we use the + operator to add together two values: int sum1 = 100 + 50; // 150 (100 + 50) int sum2 = sum1 + 250; // 400 (150 + 250) int sum3 = sum2 + sum2; // 800 (400 + 400) Java divides the operators into the following groups: Arithmetic operators +, -, *, /, %, ++, -- Assignment operators =, +=, -=, *=, /=, %=, &=, |=, ^=, >>=, <<= Comparison operators ==, !=, >, <, >=, <= Logical operators &&, ||, ! Bitwise operators |, &, ^, ~, <<, >>, <<<, >>> Control Flow Java supports the usual logical conditions from mathematics: Less than: a < b Less than or equal to: a <= b Greater than: a > b Greater than or equal to: a >= b Equal to a == b Not Equal to a != b Java has the following conditional statements: Use if to specify a block of code to be executed, if a specified condition is true Use else to specify a block of code to be executed, if the same condition is false Use else if to specify a new condition to test, if the first condition is false Use switch to specify many alternative blocks of code to be executed If Statement Use the if statement to specify a block of Java code to be executed if a condition is true . if (20 > 18) { System.out.println(\"20 is greater than 18\"); } // Outputs \"20 is greater than 18\" Else Statement Use the else statement to specify a block of Java code to be executed if a condition is false . int time = 20; if (time < 18) { System.out.println(\"Good day.\"); } else { System.out.println(\"Good evening.\"); } // Outputs \"Good evening.\" Else If Statement Use the else if statement to specify a new condition if the first condition is false . int time = 22; if (time < 10) { System.out.println(\"Good morning.\"); } else if (time < 20) { System.out.println(\"Good day.\"); } else { System.out.println(\"Good evening.\"); } // Outputs \"Good evening.\" Ternary Operator There is also a short-hand if else, which is known as the ternary operator because it consists of three operands. It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements: //variable = (condition) ? expressionTrue : expressionFalse; int time = 20; String result = (time < 18) ? \"Good day.\" : \"Good evening.\"; System.out.println(result); Java Switch Use the switch statement to select one of many code blocks to be executed. Syntax : switch(expression) { case x: // code block break; case y: // code block break; default: // code block } This is how it works: The switch expression is evaluated once. The value of the expression is compared with the values of each case . If there is a match, the associated block of code is executed. The break and default keywords are optional, and will be described later in this chapter The example below uses the weekday number to calculate the weekday name:` int day = 4; switch (day) { case 1: System.out.println(\"Monday\"); break; case 2: System.out.println(\"Tuesday\"); break; case 3: System.out.println(\"Wednesday\"); break; case 4: System.out.println(\"Thursday\"); break; case 5: System.out.println(\"Friday\"); break; case 6: System.out.println(\"Saturday\"); break; case 7: System.out.println(\"Sunday\"); break; } // Outputs \"Thursday\" (day 4) Java Loops While Loop The while loop loops through a block of code as long as a specified condition is true . In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5: int i = 0; while (i < 5) { System.out.println(i); i++; } Do/While Loop The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true. The example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested: int i = 0; do { System.out.println(i); i++; } while (i < 5); For Loop When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop. Syntax for (statement 1; statement 2; statement 3) { // code block to be executed } Statement 1 is executed (one time) before the execution of the code block. Statement 2 defines the condition for executing the code block. Statement 3 is executed (every time) after the code block has been executed. The example below will print the numbers 0 to 4: for (int i = 0; i < 5; i++) { System.out.println(i); } Methods A method is a block of code which only runs when it is called. You can pass data, known as parameters, into a method. Methods are used to perform certain actions, and they are also known as functions . Why use methods? To reuse code: define the code once, and use it many times. Creating A Method A method must be declared within a class. It is defined with the name of the method, followed by parentheses () . Java provides some pre-defined methods, such as System.out.println() , but you can also create your own methods to perform certain actions: public class Main { static void myMethod() { // code to be executed } } Calling A Method To call a method in Java, write the method's name followed by two parentheses () and a semicolon ; In the following example, myMethod() is used to print a text (the action), when it is called: public class Main { static void myMethod() { System.out.println(\"I just got executed!\"); } public static void main(String[] args) { myMethod(); } } // Outputs \"I just got executed!\" Java Classes And Objects Java is an object-oriented programming language. Everything in Java is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes , such as weight and color, and methods , such as drive and brake. A Class is like an object constructor, or a \"blueprint\" for creating objects. Creating A Class To create a class, use the keyword class : /* Main.java Create a class named \"Main\" with a variable x: */ public class Main { int x = 5; } Creating An Object In Java, an object is created from a class. We have already created the class named Main , so now we can use this to create objects. To create an object of Main , specify the class name, followed by the object name, and use the keyword new : /* Example Create an object called \"myObj\" and print the value of x: */ public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } Resources Documentation Whether you are working on a new cutting edge app or simply ramping up on new technology, Java documentation has all the information you need to make your project a smashing success. Use the rich set of code samples, tutorials, developer guides, API documentation, and more to quickly develop your prototype and scale it up to a real world application. The documenatation can be found here . Courses Although you can get the Java course from any source you like, a free 12 hour course can be found on Youtube @ this link . Websites Tutorialspoint W3School HackerRank GeeksForGeeks","title":"2: Overview of Programming Languages"},{"location":"02-overview-of-programming-languages/#overview-of-programming-languages","text":"","title":"Overview of Programming Languages"},{"location":"02-overview-of-programming-languages/#introduction","text":"HTML, CSS and Javascript are languages that are used to create websites. HTML provides the structure for any website. CSS is used to style the webpage and Javascript HTML provides the structure for any website CSS is used to style the website Javascript add functionality to the website","title":"Introduction"},{"location":"02-overview-of-programming-languages/#code-editors","text":"VS Code Atom Sublime Text","title":"Code Editors"},{"location":"02-overview-of-programming-languages/#html","text":"HTML stands for Hyper Text Markup Language. It is used to create web pages. It describes the overall structure and the necessary elements of the webpage. HTML elements tell the browser how to display the content.","title":"HTML"},{"location":"02-overview-of-programming-languages/#example","text":"<!DOCTYPE html> <html> <head> <title>Page Title</title> </head> <body> <h1>My First Heading</h1> <p>My first paragraph.</p> </body> </html> There are many elements that are available within HTML. You can learn more about them from the resources mentioned below.","title":"Example"},{"location":"02-overview-of-programming-languages/#html-resources","text":"HTML Crash Course HTML Tutorials","title":"HTML Resources"},{"location":"02-overview-of-programming-languages/#css","text":"CSS stands for Cascading Style Sheets. CSS is used to design websites and and animation","title":"CSS"},{"location":"02-overview-of-programming-languages/#example-of-css","text":"/* CHange background color */ body { background-color: lightblue; } /* Changes the color and alignment of the h1 tag */ h1 { color: white; text-align: center; } /* Change the font style and size */ p { font-family: verdana; font-size: 20px; }","title":"Example of CSS"},{"location":"02-overview-of-programming-languages/#linking-css","text":"Internal : An internal CSS is defined in the head section of an HTML page, within a style element. <!DOCTYPE html> <html> <head> <style> body {background-color: powderblue;} h1 {color: blue;} p {color: red;} </style> </head> <body> <h1>This is a heading</h1> <p>This is a paragraph.</p> </body> </html> External : An external style sheet is used to define the style for many HTML pages. To use an external style sheet, add a link to it in the <head> section of each HTML page. In this method all the styles are in an external file. We create an index.html file and styles.css file. index.html : <!DOCTYPE html> <html> <head> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <h1>This is a heading</h1> <p>This is a paragraph.</p> </body> </html> styles.css : body { background-color: powderblue; } h1 { color: blue; } p { color: red; } Any styles added to this will reflect in the webpage.","title":"Linking CSS:"},{"location":"02-overview-of-programming-languages/#css-resources","text":"CSS Crash Course CSS Documentation","title":"CSS Resources:"},{"location":"02-overview-of-programming-languages/#javascript","text":"Javascript is used to add functionality to websites.","title":"Javascript"},{"location":"02-overview-of-programming-languages/#example_1","text":"// the hello world program console.log('Hello World');","title":"Example"},{"location":"02-overview-of-programming-languages/#resources-to-learn-javascript","text":"JS Course JS Documentation","title":"Resources to learn Javascript :"},{"location":"02-overview-of-programming-languages/#a-simple-website","text":"<!DOCTYPE html> <head> <title>HTML and CSS \"Hello World\"</title> <style> body { background-color: #2D2D2D; } h1 { color: #C26356; font-size: 30px; font-family: Menlo, Monaco, fixed-width; } p { color: white; font-family: \"Source Code Pro\", Menlo, Monaco, fixed-width; } </style> </head> <body> <h1>Hello World Example</h1> <p>This is a very basic \"Hello World\" example made up in HTML and CSS. See if you can change the size of the header text above.</p> </body> </html>","title":"A Simple Website"},{"location":"02-overview-of-programming-languages/#frameworks","text":"Frameworks make web development easy and quick. Here are some of the most popular web frameworks for HTML, CSS and JS. CSS Tailwind CSS Bootstrap Bulma Purecss Semantic UI JavaScript React Angular Vue","title":"Frameworks"},{"location":"02-overview-of-programming-languages/#bonus","text":"You can find what technologies are present in a website. These sites breakdown the technologies used in a website. Builtwith SimilarTech","title":"BONUS"},{"location":"02-overview-of-programming-languages/#basics-to-c","text":"The C programming language is a procedural programming language. Dennis Ritchie created it as a system programming language for writing operating systems. Low-level memory access, a small collection of keywords, and a clean style are all qualities that make C language excellent for system programming, such as operating system or compiler development.","title":"Basics to C"},{"location":"02-overview-of-programming-languages/#structure-of-a-c-program","text":"C follows a particular structure that the source code should be written as. Not following this structure would lead to a Compilation Error // Headers #include <stdio.h> int main() { // main() functions int session_number = 2; // Body of the main() function printf(\"%d\", a); return 0; // Return } Header Files : The first and most important component in the structure of a C program is the inclusion of the Header files, to run the C Program.","title":"Structure of a C Program"},{"location":"02-overview-of-programming-languages/#header-file","text":"A header file (.h) is a file that includes C function declarations and macro definitions that can be shared across several source files. Here are some of the header files which are commonly used in C Language: Header Files Description stdio.h Input/Output conio.h Console Input/Output Functions stdlib.h General Utility Functions string.h String Functions math.h Math Functions main() Function : The next step in writing a C Program is to declare the main() function. int main(){ } Body : The body of a C program, refers to the operations that are performed in its functions. int main(){ int members = 200; printf(\"%d\", members); } Return Statement : The return statement depends upon the return type of your function. In the example we had above, main() function has the return type int . Hence, once we are done executing that function, we should return an int value from the function.","title":"Header File"},{"location":"02-overview-of-programming-languages/#hello-world-in-c","text":"WOOHOO! You are ready to write your first program in C. Let's write a program that would print \" Hello World! \" onto the screen. #include<stdio.h> int main(){ printf(\"Hello World!\"); return 0; }","title":"Hello World in C"},{"location":"02-overview-of-programming-languages/#data-types","text":"The follwoing table represents the data type in C programming language: Data Type Storage Size Value Range char 1 byte -128 to 127 or 0 to 255 unsigned char 1 byte 0 to 255 signed char 1 byte -128 to 127 int 2 bytes -32,768 to 32,767 unsigned int 2 bytes 0 to 65,535 short 2 bytes -32,768 to 32,767 unsigned short 2 bytes 0 to 65,535 long 8 bytes -9223372036854775808 to 9223372036854775807 unsigned long 8 bytes 0 to 18446744073709551615 float 4 byte 1.2E-38 to 3.4E+38 double 8 byte 2.3E-308 to 1.7E+308 long double 10 byte 3.4E-4932 to 1.1E+4932","title":"Data Types"},{"location":"02-overview-of-programming-languages/#printf-and-scanf-in-c","text":"The printf() and scanf() functions are used for input and output in C language. Both functions are inbuilt library functions, defined in stdio.h (header file).","title":"printf() and scanf() in C"},{"location":"02-overview-of-programming-languages/#printf-function","text":"The printf() function is used for output. It prints the given statement to the console. The syntax of printf() function is given below: printf(\"format string\",argument_list); The format string can be %d (integer), %c (character), %s (string), %f (float) etc.","title":"printf() function"},{"location":"02-overview-of-programming-languages/#scanf-function","text":"The scanf() function is used for input. It reads the input data from the console. scanf(\"format string\",argument_list); Program to print cube of given number Let's see a simple example of c language that gets input from the user and prints the cube of the given number. #include<stdio.h> int main(){ int number; printf(\"enter a number:\"); scanf(\"%d\",&number); printf(\"cube of number is:%d \",number*number*number); return 0; }","title":"scanf() function"},{"location":"02-overview-of-programming-languages/#c-operators","text":"An operator is simply a symbol that is used to perform operations. There can be many types of operations like arithmetic, logical, bitwise, etc. There are following types of operators to perform different types of operations in C language. Arithmetic Operators Relational Operators Shift Operators Logical Operators Bitwise Operators Ternary or Conditional Operators Assignment Operator Misc Operator Category Operator Associativity Postfix () [] -> . ++ - - Left to right Unary + - ! ~ ++ - - (type)* & sizeof Right to left Multiplicative * / % Left to right Additive + - Left to right Shift << >> Left to right Relational < <= > >= Left to right Equality == != Left to right Bitwise AND & Left to right Bitwise XOR ^ Left to right Bitwise OR | Left to right Logical AND && Left to right Logical OR || Left to right Conditional ?: Right to left Assignment = += -= *= /= %=>>= <<= &= ^= = Comma , Left to right","title":"C Operators"},{"location":"02-overview-of-programming-languages/#control-flow","text":"C supports the usual logical conditions from mathematics: Less than: a < b Less than or equal to: a <= b Greater than: a > b Greater than or equal to: a >= b Equal to a == b Not Equal to a != b C has the following conditional statements: Use if to specify a block of code to be executed, if a specified condition is true Use else to specify a block of code to be executed, if the same condition is false Use else if to specify a new condition to test, if the first condition is false Use switch to specify many alternative blocks of code to be executed","title":"Control Flow"},{"location":"02-overview-of-programming-languages/#if-statement","text":"Use the if statement to specify a block of Java code to be executed if a condition is true . if (20 > 18) { printf(\"20 is greater than 18\"); } // Outputs \"20 is greater than 18\"","title":"If Statement"},{"location":"02-overview-of-programming-languages/#else-statement","text":"Use the else statement to specify a block of C code to be executed if a condition is false . int time = 20; if (time < 18) { printf(\"Good day.\"); } else { printf(\"Good evening.\"); } // Outputs \"Good evening.\"","title":"Else Statement"},{"location":"02-overview-of-programming-languages/#else-if-statement","text":"Use the else if statement to specify a new condition if the first condition is false . int time = 22; if (time < 10) { printf(\"Good morning.\"); } else if (time < 20) { printf(\"Good day.\"); } else { printf(\"Good evening.\"); } // Outputs \"Good evening.\"","title":"Else If Statement"},{"location":"02-overview-of-programming-languages/#ternary-operator","text":"There is also a short-hand if else, which is known as the ternary operator because it consists of three operands. It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements: //variable = (condition) ? expressionTrue : expressionFalse; int time = 20; char[] result = (time < 18) ? \"Good day.\" : \"Good evening.\"; printf(\"%s\",result);","title":"Ternary Operator"},{"location":"02-overview-of-programming-languages/#switch-statement","text":"Use the switch statement to select one of many code blocks to be executed.","title":"Switch Statement"},{"location":"02-overview-of-programming-languages/#syntax","text":"switch(expression) { case x: // code block break; case y: // code block break; default: // code block } This is how it works: The switch expression is evaluated once. The value of the expression is compared with the values of each case . If there is a match, the associated block of code is executed. The break and default keywords are optional, and will be described later in this chapter The example below uses the weekday number to calculate the weekday name:` int day = 4; switch (day) { case 1: printf(\"Monday\"); break; case 2: printf(\"Tuesday\"); break; case 3: printf(\"Wednesday\"); break; case 4: printf(\"Thursday\"); break; case 5: printf(\"Friday\"); break; case 6: printf(\"Saturday\"); break; case 7: printf(\"Sunday\"); break; } // Outputs \"Thursday\" (day 4)","title":"Syntax :"},{"location":"02-overview-of-programming-languages/#loops-in-c","text":"","title":"Loops in C"},{"location":"02-overview-of-programming-languages/#while-loop","text":"The while loop loops through a block of code as long as a specified condition is true . In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5: int i = 0; while (i < 5) { printf(\"%d\\n\",i); i++; }","title":"While Loop"},{"location":"02-overview-of-programming-languages/#dowhile-loop","text":"The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true. The example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested: int i = 0; do { printf(\"%d\\n\",i); i++; } while (i < 5);","title":"Do/While Loop"},{"location":"02-overview-of-programming-languages/#for-loop","text":"When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop.","title":"For Loop"},{"location":"02-overview-of-programming-languages/#syntax_1","text":"for (statement 1; statement 2; statement 3) { // code block to be executed } Statement 1 is executed (one time) before the execution of the code block. Statement 2 defines the condition for executing the code block. Statement 3 is executed (every time) after the code block has been executed. The example below will print the numbers 0 to 4: for (int i = 0; i < 5; i++) { printf(\"%d\",i); }","title":"Syntax"},{"location":"02-overview-of-programming-languages/#functions","text":"A function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function. Functions are used to perform certain actions, and they are also known as methods . Why use functions? To reuse code: define the code once, and use it many times.","title":"Functions"},{"location":"02-overview-of-programming-languages/#creating-a-function","text":"A function is defined with a certain name, followed by parentheses () . C provides some pre-defined methods, such as printf() , but you can also create your own functions to perform certain actions: return_type function_name(data_type parameter...){ //code to be executed }","title":"Creating A Function"},{"location":"02-overview-of-programming-languages/#calling-a-function","text":"To call a function in C, write the function's name followed by two parentheses () and a semicolon ; Let's see a simple example of C function that doesn't return any value from the function. Example without return value: void hello(){ printf(\"hello c\"); } If you want to return any value from the function, you need to use any data type such as int, long, char, etc. The return type depends on the value to be returned from the function. Let's see a simple example of C function that returns int value from the function. Example with return value: int get(){ return 10; } In the above example, we have to return 10 as a value, so the return type is int. If you want to return floating-point value (e.g., 10.2, 3.1, 54.5, etc), you need to use float as the return type of the method. Program to calculate the average of five numbers. #include<stdio.h> void average(int, int, int, int, int); void main() { int a,b,c,d,e; printf(\"\\nGoing to calculate the average of five numbers:\"); printf(\"\\nEnter five numbers:\"); scanf(\"%d %d %d %d %d\",&a,&b,&c,&d,&e); average(a,b,c,d,e); } void average(int a, int b, int c, int d, int e) { float avg; avg = (a+b+c+d+e)/5; printf(\"The average of given five numbers : %f\",avg); }","title":"Calling A Function"},{"location":"02-overview-of-programming-languages/#arrays","text":"Think about a situation where you want to store the names of every student in your batch? Don't you think it is a little too much work in assigning a name to one variable? That is where arrays come! An array (in any programming language) is collection of similar data types, stored at continuous memory locations, under one variable name.","title":"Arrays"},{"location":"02-overview-of-programming-languages/#declaration-of-arrays","text":"There are three main ways how you could declare an array: By size : You could declare an array by mentioning just the size of elements you want in an array. int marks[5]; int items = 10 int price_canteen[items]; By initialising the elements : You could declare an array by initialising the elements in the array (without the size). int marks[] = {90, 84, 68, 71, 45}; By initialising the elements (with size) : You could otherwise declare an array by initialising the elements in the array (with size). float price_canteen[4] = {4, 12.5, 11, 6};","title":"Declaration of Arrays"},{"location":"02-overview-of-programming-languages/#accessing-the-elements","text":"The elements in the array are accessed using its index position. The index of the elements in the array go from 0 ( first element ) to n-1 ( last element ). char vowels[] = {'a', 'e', 'i', 'o', 'u'}; printf(\"%c\", vowels[1]);","title":"Accessing the elements"},{"location":"02-overview-of-programming-languages/#strings","text":"As we don't have a predefined data type in C which we could use to initialise strings, we use character arrays which acts the same any string would do. char strongest_avenger[] = {'s','h','a','k','t','i','m','a','n'}; char name[] = \"Karen\"; printf(\"%s\", name); char str[50]; scanf(\"%s\", str);","title":"Strings"},{"location":"02-overview-of-programming-languages/#multi-dimensional-arrays","text":"What about a table? What about a matrix? How do I store that in C? Yep, multi-dimensional arrays . int height_weight [2][2]; In the above example, we create an multi-dimensional array called height_weight , which has 2 rows and 2 columns. You could declare the multi-dimensional array, the same way you do with normal ( 1-D ) arrays as well. int height_weight [2][2] = {{3, 60}, {2, 80}}; You could create an array of strings using multi-dimensional arrays. char cool_people[5][10] = { \"Bheem\", \"Raju\", \"Chutki\", \"Dolu\", \"Bolu\" };","title":"Multi-dimensional Arrays"},{"location":"02-overview-of-programming-languages/#object-oriented-programming-system","text":"","title":"Object Oriented Programming System"},{"location":"02-overview-of-programming-languages/#using-java","text":"","title":"Using JAVA"},{"location":"02-overview-of-programming-languages/#why-oops","text":"Object-oriented programming based on the main features that are: Abstraction: It helps in letting the useful information or relevant data to a user, increasing the program\u2019s efficiency and making things simple. Inheritance: It helps in inheriting the methods, functions, properties, and fields of a base class in the derived class. Polymorphism: It helps in doing one task in many ways with the help of overloading and overriding, which is also known as compile-time and run-time polymorphism, respectively. Encapsulation: It helps in hiding irrelevant data from a user and prevents the user from unauthorized access. Object-oriented programming languages are C++, C#, Java, Python, Ruby, PHP, Perl, Objective-C, Swift, Dart, Lisp, etc. In an object-oriented application, objects can be easily reused in another application. New objects can be easily created for the same class, and code can be easily maintained and altered. It also has the feature of memory management. It provides a great benefit in designing large programs, which can be easily divided into smaller parts and helps in distinguishing the components or phases that need to be executed or planned in a certain way.","title":"Why OOPS \ud83e\udd14?!"},{"location":"02-overview-of-programming-languages/#functional-programming-vs-oops","text":"","title":"Functional Programming Vs OOPS"},{"location":"02-overview-of-programming-languages/#why-java","text":"97% of Enterprise Desktops run Java. 89% of Desktops (or Computers) in the U.S. run Java. 9 Million Java Developers worldwide. Java is the number 1 choice for developers. Java continues to be the most used development platform. 3 billion mobile phones run Java. 100% of Blu-ray Disc Players ship with Java. There are currently over 5 billion Java Cards in use. 125 million TV devices run Java. 5 of the Top 5 Original Equipment Manufacturers Ship Java ME","title":"Why Java \ud83e\udd14?!"},{"location":"02-overview-of-programming-languages/#installation-java-se-16","text":"Go to the ORACLE JAVA website Click on the Download java button Got to the appropeiate section based on your operating system Download the appropriate jdk (Java Development Kit) version Once the download completes, click on the installer and run the setup Make sure to add the path of the jdk file to your environment variables To check the installation open the command prompt and type the following C:\\Users\\jhaas>java --version If installed correctly, the output should look like the following: java 16.0.2 2021-07-20 Java(TM) SE Runtime Environment (build 16.0.2+7-67) Java Hotspot(TM) 64-Bit Server VM (build 16.0.2+7-67, mixed mode, sharing) Open a text editor of your choice and proceed to write your first Java Code!! \ud83d\ude4c\ud83c\udf89\u2728","title":"Installation Java SE 16"},{"location":"02-overview-of-programming-languages/#getting-started","text":"","title":"Getting Started"},{"location":"02-overview-of-programming-languages/#object","text":"Any entity that has state and behavior is known as an object. For example, a chair, pen, table, keyboard, bike, etc. It can be physical or logical. Example: A dog is an object because it has states like color, name, breed, etc. as well as behaviors like wagging the tail, barking, eating, etc.","title":"Object"},{"location":"02-overview-of-programming-languages/#class","text":"Collection of objects is called class. It is a logical entity. A class can also be defined as a blueprint from which you can create an individual object. Class doesn't consume any space. A class in Java can contain: Fields Methods Constructors Blocks Nested class and interface class <class_name>{ field; method; }","title":"Class"},{"location":"02-overview-of-programming-languages/#methods","text":"In Java, a method is like a function which is used to expose the behavior of an object. Advantage of Method - Code Reusability - Code Optimization","title":"Methods"},{"location":"02-overview-of-programming-languages/#first-java-program","text":"Open a text editor of your choice (notepad++, vscode, etc) Declare a class (Name of class containing the main function, should be the name of the program, for example, if the name of the class containing the main function is Test , then name of the file must be Test.java ) class Test{ public static void main (String args[]){ System.out.println(\"Hello World\") } } Save the file for Java Hello World program as Test.java Open the command prompt. Go to Directory where the program has been saved. Compile the code of your Hello world Java program using command, C:\\Users\\jhaas>javac Test.java If you look in your working folder, you can see that a file named Test.class has been created. To execute the code, enter the command java followed by the class name, as expected output Hello World is displayed now. C:\\Users\\jhaas>java Test Hello World","title":"First Java Program"},{"location":"02-overview-of-programming-languages/#comments","text":"Write single line comments using // ```java // This is a comment System.out.println(\"Hello World\"); Multi-line comments start with `/*` and ends with `*/`. ```java /* The code below will print the words Hello World to the screen, and it is amazing */ System.out.println(\"Hello World\");","title":"Comments"},{"location":"02-overview-of-programming-languages/#data-types_1","text":"In Java, there are different types of variables, for example: String - stores text, such as \"Hello\". String values are surrounded by double quotes int - stores integers (whole numbers), without decimals, such as 123 or -123 float - stores floating point numbers, with decimals, such as 19.99 or -19.99 char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes boolean - stores values with two states: true or false","title":"Data Types"},{"location":"02-overview-of-programming-languages/#declaring-variables","text":"To create a variable, you must specify the type and assign it a value: String name = \"ACM\"; int myNum = 15; int myNum2; myNum2 = 15;","title":"Declaring Variables"},{"location":"02-overview-of-programming-languages/#data-types_2","text":"As explained in the previous section, a variable in Java must be a specified data type: int myNum = 5; // Integer (whole number) float myFloatNum = 5.99f; // Floating point number char myLetter = 'D'; // Character boolean myBool = true; // Boolean String myText = \"Hello\"; // String","title":"Data Types"},{"location":"02-overview-of-programming-languages/#primitive-data-types","text":"Data Type Description Size byte Stores whole numbers from -128 to 127 1 byte short Stores whole numbers from -32,768 to 32,767 2 bytes int Stores whole numbers from -2,147,483,648 to 2,147,483,647 4 bytes long Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 8 bytes float Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits 4 bytes double Stores fractional numbers. Sufficient for storing 15 decimal digits 8 bytes boolean Stores true or false values 1 bit char Stores a single character/letter or ASCII values 2 bytes","title":"Primitive Data Types"},{"location":"02-overview-of-programming-languages/#operators","text":"Operators are used to perform operations on variables and values. In the example below, we use the + operator to add together two values: int sum1 = 100 + 50; // 150 (100 + 50) int sum2 = sum1 + 250; // 400 (150 + 250) int sum3 = sum2 + sum2; // 800 (400 + 400) Java divides the operators into the following groups: Arithmetic operators +, -, *, /, %, ++, -- Assignment operators =, +=, -=, *=, /=, %=, &=, |=, ^=, >>=, <<= Comparison operators ==, !=, >, <, >=, <= Logical operators &&, ||, ! Bitwise operators |, &, ^, ~, <<, >>, <<<, >>>","title":"Operators"},{"location":"02-overview-of-programming-languages/#control-flow_1","text":"Java supports the usual logical conditions from mathematics: Less than: a < b Less than or equal to: a <= b Greater than: a > b Greater than or equal to: a >= b Equal to a == b Not Equal to a != b Java has the following conditional statements: Use if to specify a block of code to be executed, if a specified condition is true Use else to specify a block of code to be executed, if the same condition is false Use else if to specify a new condition to test, if the first condition is false Use switch to specify many alternative blocks of code to be executed","title":"Control Flow"},{"location":"02-overview-of-programming-languages/#if-statement_1","text":"Use the if statement to specify a block of Java code to be executed if a condition is true . if (20 > 18) { System.out.println(\"20 is greater than 18\"); } // Outputs \"20 is greater than 18\"","title":"If Statement"},{"location":"02-overview-of-programming-languages/#else-statement_1","text":"Use the else statement to specify a block of Java code to be executed if a condition is false . int time = 20; if (time < 18) { System.out.println(\"Good day.\"); } else { System.out.println(\"Good evening.\"); } // Outputs \"Good evening.\"","title":"Else Statement"},{"location":"02-overview-of-programming-languages/#else-if-statement_1","text":"Use the else if statement to specify a new condition if the first condition is false . int time = 22; if (time < 10) { System.out.println(\"Good morning.\"); } else if (time < 20) { System.out.println(\"Good day.\"); } else { System.out.println(\"Good evening.\"); } // Outputs \"Good evening.\"","title":"Else If Statement"},{"location":"02-overview-of-programming-languages/#ternary-operator_1","text":"There is also a short-hand if else, which is known as the ternary operator because it consists of three operands. It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements: //variable = (condition) ? expressionTrue : expressionFalse; int time = 20; String result = (time < 18) ? \"Good day.\" : \"Good evening.\"; System.out.println(result);","title":"Ternary Operator"},{"location":"02-overview-of-programming-languages/#java-switch","text":"Use the switch statement to select one of many code blocks to be executed.","title":"Java Switch"},{"location":"02-overview-of-programming-languages/#syntax_2","text":"switch(expression) { case x: // code block break; case y: // code block break; default: // code block } This is how it works: The switch expression is evaluated once. The value of the expression is compared with the values of each case . If there is a match, the associated block of code is executed. The break and default keywords are optional, and will be described later in this chapter The example below uses the weekday number to calculate the weekday name:` int day = 4; switch (day) { case 1: System.out.println(\"Monday\"); break; case 2: System.out.println(\"Tuesday\"); break; case 3: System.out.println(\"Wednesday\"); break; case 4: System.out.println(\"Thursday\"); break; case 5: System.out.println(\"Friday\"); break; case 6: System.out.println(\"Saturday\"); break; case 7: System.out.println(\"Sunday\"); break; } // Outputs \"Thursday\" (day 4)","title":"Syntax :"},{"location":"02-overview-of-programming-languages/#java-loops","text":"","title":"Java Loops"},{"location":"02-overview-of-programming-languages/#while-loop_1","text":"The while loop loops through a block of code as long as a specified condition is true . In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5: int i = 0; while (i < 5) { System.out.println(i); i++; }","title":"While Loop"},{"location":"02-overview-of-programming-languages/#dowhile-loop_1","text":"The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true. The example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested: int i = 0; do { System.out.println(i); i++; } while (i < 5);","title":"Do/While Loop"},{"location":"02-overview-of-programming-languages/#for-loop_1","text":"When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop.","title":"For Loop"},{"location":"02-overview-of-programming-languages/#syntax_3","text":"for (statement 1; statement 2; statement 3) { // code block to be executed } Statement 1 is executed (one time) before the execution of the code block. Statement 2 defines the condition for executing the code block. Statement 3 is executed (every time) after the code block has been executed. The example below will print the numbers 0 to 4: for (int i = 0; i < 5; i++) { System.out.println(i); }","title":"Syntax"},{"location":"02-overview-of-programming-languages/#methods_1","text":"A method is a block of code which only runs when it is called. You can pass data, known as parameters, into a method. Methods are used to perform certain actions, and they are also known as functions . Why use methods? To reuse code: define the code once, and use it many times.","title":"Methods"},{"location":"02-overview-of-programming-languages/#creating-a-method","text":"A method must be declared within a class. It is defined with the name of the method, followed by parentheses () . Java provides some pre-defined methods, such as System.out.println() , but you can also create your own methods to perform certain actions: public class Main { static void myMethod() { // code to be executed } }","title":"Creating A Method"},{"location":"02-overview-of-programming-languages/#calling-a-method","text":"To call a method in Java, write the method's name followed by two parentheses () and a semicolon ; In the following example, myMethod() is used to print a text (the action), when it is called: public class Main { static void myMethod() { System.out.println(\"I just got executed!\"); } public static void main(String[] args) { myMethod(); } } // Outputs \"I just got executed!\"","title":"Calling A Method"},{"location":"02-overview-of-programming-languages/#java-classes-and-objects","text":"Java is an object-oriented programming language. Everything in Java is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes , such as weight and color, and methods , such as drive and brake. A Class is like an object constructor, or a \"blueprint\" for creating objects.","title":"Java Classes And Objects"},{"location":"02-overview-of-programming-languages/#creating-a-class","text":"To create a class, use the keyword class : /* Main.java Create a class named \"Main\" with a variable x: */ public class Main { int x = 5; }","title":"Creating A Class"},{"location":"02-overview-of-programming-languages/#creating-an-object","text":"In Java, an object is created from a class. We have already created the class named Main , so now we can use this to create objects. To create an object of Main , specify the class name, followed by the object name, and use the keyword new : /* Example Create an object called \"myObj\" and print the value of x: */ public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } }","title":"Creating An Object"},{"location":"02-overview-of-programming-languages/#resources","text":"","title":"Resources"},{"location":"02-overview-of-programming-languages/#documentation","text":"Whether you are working on a new cutting edge app or simply ramping up on new technology, Java documentation has all the information you need to make your project a smashing success. Use the rich set of code samples, tutorials, developer guides, API documentation, and more to quickly develop your prototype and scale it up to a real world application. The documenatation can be found here .","title":"Documentation"},{"location":"02-overview-of-programming-languages/#courses","text":"Although you can get the Java course from any source you like, a free 12 hour course can be found on Youtube @ this link .","title":"Courses"},{"location":"02-overview-of-programming-languages/#websites","text":"Tutorialspoint W3School HackerRank GeeksForGeeks","title":"Websites"},{"location":"03-data-structures/","text":"Data Structures A data structure is a particular way of organizing data in a computer so that it can be used effectively. The data structure name indicates itself that organizing the data in memory.The data structure is not any programming language like C, C++, java, etc. It is a set of algorithms that we can use in any programming language to structure the data in the memory. To structure the data in memory, 'n' number of algorithms were proposed, and all these algorithms are known as Abstract data types. These abstract data types are the set of rules. Types Of Data Structures The Data Structures can be divided as follows: * Primitive * Non-Primitive Another Classification for Data Structures can be as follows: * Static Data Structure : It is a type of data structure where the size is allocated at the compile time. Therefore, the maximum size is fixed. * Dynamic Data Structure : It is a type of data structure where the size is allocated at the run time. Therefore, the maximum size is flexible. Operations On A Data Structure Searching : We can search for any element in a data structure. Sorting : We can sort the elements of a data structure either in an ascending or descending order. Insertion : We can also insert the new element in a data structure. Updation : We can also update the element, i.e., we can replace the element with another element. Deletion : We can also perform the delete operation to remove the element from the data structure. Advantages Of Data Structures The following are the advantages of a data structure : Efficiency : If the choice of a data structure for implementing a particular ADT is proper, it makes the program very efficient in terms of time and space. Reusability : The data structure provides reusability means that multiple client programs can use the data structure. Abstraction : The data structure specified by an ADT also provides the level of abstraction. The client cannot see the internal working of the data structure, so it does not have to worry about the implementation part. The client can only see the interface. Primitive DS The primitive data structures are primitive data types. The int, char, float, double, and pointer are the primitive data structures that can hold a single value. We have already discussed about these and their use and application in the OOPS part. Non-Primitive DS Linear DS : The arrangement of data in a sequential manner is known as a linear data structure. The data structures used for this purpose are Arrays, Linked list, Stacks, and Queues. In these data structures, one element is connected to only one another element in a linear form. Non-Linear DS : When one element is connected to the 'n' number of elements known as a non-linear data structure. The best example is trees and graphs. In this case, the elements are arranged in a random manner. We will discuss the above data structures in brief in the coming topics. Array Arrays are defined as the collection of similar type of data items stored at contiguous memory locations. Arrays are the derived data type in C programming language which can store the primitive type of data such as int, char, double, float, etc. Array is the simplest data structure where each data element can be randomly accessed by using its index number. For example, if we want to store the marks of a student in 6 subjects, then we don't need to define different variable for the marks in different subject. instead of that, we can define an array which can store the marks in each subject at a the contiguous memory locations. #include <stdio.h> void main () { int marks[6] = {56,78,88,76,56,89); int i; float avg; for (i=0; i<6; i++ ) { avg = avg + marks[i]; } printf(avg); } int x = a[i][j]; for ( int i=0; i<n ;i++) { for (int j=0; j<n; j++) { a[i][j] = 0; } } Visit : https://www.geeksforgeeks.org/array-data-structure/ Queue A queue can be defined as an ordered list which enables insert operations to be performed at one end called REAR and delete operations to be performed at another end called FRONT. Queue is referred to be as First In First Out list. For example, people waiting in line for a rail ticket form a queue. Due to the fact that queue performs actions on first in first out basis which is quite fair for the ordering of actions. There are various applications of queues discussed as below. Queues are widely used as waiting lists for a single shared resource like printer, disk, CPU. Queues are used in asynchronous transfer of data (where data is not being transferred at the same rate between two processes) for eg. pipes, file IO, sockets. Queues are used as buffers in most of the applications like MP3 media player, CD player, etc. Queue are used to maintain the play list in media players in order to add and remove the songs from the play-list. Queues are used in operating systems for handling interrupts. Operations on Queue There are two fundamental operations performed on a Queue: Enqueue : The enqueue operation is used to insert the element at the rear end of the queue. It returns void. Dequeue : The dequeue operation performs the deletion from the front-end of the queue. It also returns the element which has been removed from the front-end. It returns an integer value. The dequeue operation can also be designed to void. Peek : This is the third operation that returns the element, which is pointed by the front pointer in the queue but does not delete it. Queue overflow (isfull) : When the Queue is completely full, then it shows the overflow condition. Queue underflow (isempty) : When the Queue is empty, i.e., no elements are in the Queue then it throws the underflow condition. // C program for array implementation of queue #include <limits.h> #include <stdio.h> #include <stdlib.h> // A structure to represent a queue struct Queue { int front, rear, size; unsigned capacity; int* array; }; // function to create a queue // of given capacity. // It initializes size of queue as 0 struct Queue* createQueue(unsigned capacity) { struct Queue* queue = (struct Queue*)malloc( sizeof(struct Queue)); queue->capacity = capacity; queue->front = queue->size = 0; // This is important, see the enqueue queue->rear = capacity - 1; queue->array = (int*)malloc( queue->capacity * sizeof(int)); return queue; } // Queue is full when size becomes // equal to the capacity int isFull(struct Queue* queue) { return (queue->size == queue->capacity); } // Queue is empty when size is 0 int isEmpty(struct Queue* queue) { return (queue->size == 0); } // Function to add an item to the queue. // It changes rear and size void enqueue(struct Queue* queue, int item) { if (isFull(queue)) return; queue->rear = (queue->rear + 1) % queue->capacity; queue->array[queue->rear] = item; queue->size = queue->size + 1; printf(\"%d enqueued to queue\\n\", item); } // Function to remove an item from queue. // It changes front and size int dequeue(struct Queue* queue) { if (isEmpty(queue)) return INT_MIN; int item = queue->array[queue->front]; queue->front = (queue->front + 1) % queue->capacity; queue->size = queue->size - 1; return item; } // Function to get front of queue int front(struct Queue* queue) { if (isEmpty(queue)) return INT_MIN; return queue->array[queue->front]; } // Function to get rear of queue int rear(struct Queue* queue) { if (isEmpty(queue)) return INT_MIN; return queue->array[queue->rear]; } // Driver program to test above functions./ int main() { struct Queue* queue = createQueue(1000); enqueue(queue, 10); enqueue(queue, 20); enqueue(queue, 30); enqueue(queue, 40); printf(\"%d dequeued from queue\\n\\n\", dequeue(queue)); printf(\"Front item is %d\\n\", front(queue)); printf(\"Rear item is %d\\n\", rear(queue)); return 0; } Types of Queue Linear Queue In Linear Queue, an insertion takes place from one end while the deletion occurs from another end. The end at which the insertion takes place is known as the rear end, and the end at which the deletion takes place is known as front end. It strictly follows the FIFO rule. The linear Queue can be represented, as shown in the below figure: Circular Queue In Circular Queue, all the nodes are represented as circular. It is similar to the linear Queue except that the last element of the queue is connected to the first element. It is also known as Ring Buffer as all the ends are connected to another end. The circular queue can be represented as: Priority Queue A priority queue is another special type of Queue data structure in which each element has some priority associated with it. Based on the priority of the element, the elements are arranged in a priority queue. If the elements occur with the same priority, then they are served according to the FIFO principle. Deque (Double Ended Queue) Both the Linear Queue and Deque are different as the linear queue follows the FIFO principle whereas, deque does not follow the FIFO principle. In Deque, the insertion and deletion can occur from both ends. Visit : https://www.geeksforgeeks.org/queue-data-structure/ Stack A Stack is a linear data structure that follows the LIFO (Last-In-First-Out) principle. Stack has one end, whereas the Queue has two ends (front and rear) . It contains only one pointer top pointer pointing to the topmost element of the stack. Whenever an element is added in the stack, it is added on the top of the stack, and the element can be deleted only from the stack. In other words, a stack can be defined as a container in which insertion and deletion can be done from the one end known as the top of the stack. Some key points related to stack - It is called as stack because it behaves like a real-world stack, piles of books, etc. - A Stack is an abstract data type with a pre-defined capacity, which means that it can store the elements of a limited size. - It is a data structure that follows some order to insert and delete the elements, and that order can be LIFO or FILO. Standard Stack Operations The following are some common operations implemented on the stack: push() : When we insert an element in a stack then the operation is known as a push. If the stack is full then the overflow condition occurs. pop() : When we delete an element from the stack, the operation is known as a pop. If the stack is empty means that no element exists in the stack, this state is known as an underflow state. isEmpty() : It determines whether the stack is empty or not. isFull() : It determines whether the stack is full or not.' peek() : It returns the element at the given position. count() : It returns the total number of elements available in a stack. change() : It changes the element at the given position. display() : It prints all the elements available in the stack. Applications of Stack Balancing of symbols : Stack is used for balancing a symbol. As we know, each program has an opening and closing braces; when the opening braces come, we push the braces in a stack, and when the closing braces appear, we pop the opening braces from the stack. Therefore, the net value comes out to be zero. If any symbol is left in the stack, it means that some syntax occurs in a program. String reversal: Stack is also used for reversing a string. For example, we want to reverse a \"javaTpoint\" string, so we can achieve this with the help of a stack. First, we push all the characters of the string in a stack until we reach the null character. After pushing all the characters, we start taking out the character one by one until we reach the bottom of the stack. UNDO/REDO: It can also be used for performing UNDO/REDO operations. For example, we have an editor in which we write 'a', then 'b', and then 'c'; therefore, the text written in an editor is abc. So, there are three states, a, ab, and abc, which are stored in a stack. There would be two stacks in which one stack shows UNDO state, and the other shows REDO state. If we want to perform UNDO operation, and want to achieve 'ab' state, then we implement pop operation. Recursion: The recursion means that the function is calling itself again. To maintain the previous states, the compiler creates a system stack in which all the previous records of the function are maintained. DFS(Depth First Search): This search is implemented on a Graph, and Graph uses the stack data structure. Backtracking: Suppose we have to create a path to solve a maze problem. If we are moving in a particular path, and we realize that we come on the wrong way. In order to come at the beginning of the path to create a new path, we have to use the stack data structure. Expression conversion: Stack can also be used for expression conversion. This is one of the most important applications of stack. Memory management: The stack manages the memory. The memory is assigned in the contiguous memory blocks. The memory is known as stack memory as all the variables are assigned in a function call stack memory. The memory size assigned to the program is known to the compiler. When the function is created, all its variables are assigned in the stack memory. When the function completed its execution, all the variables assigned in the stack are released. // C program for array implementation of stack #include <limits.h> #include <stdio.h> #include <stdlib.h> // A structure to represent a stack struct Stack { int top; unsigned capacity; int* array; }; // function to create a stack of given capacity. It initializes size of // stack as 0 struct Stack* createStack(unsigned capacity) { struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack)); stack->capacity = capacity; stack->top = -1; stack->array = (int*)malloc(stack->capacity * sizeof(int)); return stack; } // Stack is full when top is equal to the last index int isFull(struct Stack* stack) { return stack->top == stack->capacity - 1; } // Stack is empty when top is equal to -1 int isEmpty(struct Stack* stack) { return stack->top == -1; } // Function to add an item to stack. It increases top by 1 void push(struct Stack* stack, int item) { if (isFull(stack)) return; stack->array[++stack->top] = item; printf(\"%d pushed to stack\\n\", item); } // Function to remove an item from stack. It decreases top by 1 int pop(struct Stack* stack) { if (isEmpty(stack)) return INT_MIN; return stack->array[stack->top--]; } // Function to return the top from stack without removing it int peek(struct Stack* stack) { if (isEmpty(stack)) return INT_MIN; return stack->array[stack->top]; } // Driver program to test above functions int main() { struct Stack* stack = createStack(100); push(stack, 10); push(stack, 20); push(stack, 30); printf(\"%d popped from stack\\n\", pop(stack)); return 0; } Visit : https://www.geeksforgeeks.org/stack-data-structure/ Linked List Linked List can be defined as collection of objects called nodes that are randomly stored in the memory. A node contains two fields i.e. data stored at that particular address and the pointer which contains the address of the next node in the memory. The last node of the list contains pointer to the null. Uses of Linked List The list is not required to be contiguously present in the memory. The node can reside any where in the memory and linked together to make a list. This achieves optimized utilization of space. list size is limited to the memory size and doesn't need to be declared in advance. Empty node can not be present in the linked list. We can store values of primitive types or objects in the singly linked list. struct node { int data; struct node *next; }; struct node *head, *ptr; ptr = (struct node *)malloc(sizeof(struct node *)); Linked List in C: Menu Driven Program #include<stdio.h> #include<stdlib.h> struct node { int data; struct node *next; }; struct node *head; void beginsert (); void lastinsert (); void randominsert(); void begin_delete(); void last_delete(); void random_delete(); void display(); void search(); void main () { int choice =0; while(choice != 9) { printf(\"\\n\\n*********Main Menu*********\\n\"); printf(\"\\nChoose one option from the following list ...\\n\"); printf(\"\\n===============================================\\n\"); printf(\"\\n1.Insert in begining\\n2.Insert at last\\n3.Insert at any random location\\n4.Delete from Beginning\\n 5.Delete from last\\n6.Delete node after specified location\\n7.Search for an element\\n8.Show\\n9.Exit\\n\"); printf(\"\\nEnter your choice?\\n\"); scanf(\"\\n%d\",&choice); switch(choice) { case 1: beginsert(); break; case 2: lastinsert(); break; case 3: randominsert(); break; case 4: begin_delete(); break; case 5: last_delete(); break; case 6: random_delete(); break; case 7: search(); break; case 8: display(); break; case 9: exit(0); break; default: printf(\"Please enter valid choice..\"); } } } void beginsert() { struct node *ptr; int item; ptr = (struct node *) malloc(sizeof(struct node *)); if(ptr == NULL) { printf(\"\\nOVERFLOW\"); } else { printf(\"\\nEnter value\\n\"); scanf(\"%d\",&item); ptr->data = item; ptr->next = head; head = ptr; printf(\"\\nNode inserted\"); } } void lastinsert() { struct node *ptr,*temp; int item; ptr = (struct node*)malloc(sizeof(struct node)); if(ptr == NULL) { printf(\"\\nOVERFLOW\"); } else { printf(\"\\nEnter value?\\n\"); scanf(\"%d\",&item); ptr->data = item; if(head == NULL) { ptr -> next = NULL; head = ptr; printf(\"\\nNode inserted\"); } else { temp = head; while (temp -> next != NULL) { temp = temp -> next; } temp->next = ptr; ptr->next = NULL; printf(\"\\nNode inserted\"); } } } void randominsert() { int i,loc,item; struct node *ptr, *temp; ptr = (struct node *) malloc (sizeof(struct node)); if(ptr == NULL) { printf(\"\\nOVERFLOW\"); } else { printf(\"\\nEnter element value\"); scanf(\"%d\",&item); ptr->data = item; printf(\"\\nEnter the location after which you want to insert \"); scanf(\"\\n%d\",&loc); temp=head; for(i=0;i<loc;i++) { temp = temp->next; if(temp == NULL) { printf(\"\\ncan't insert\\n\"); return; } } ptr ->next = temp ->next; temp ->next = ptr; printf(\"\\nNode inserted\"); } } void begin_delete() { struct node *ptr; if(head == NULL) { printf(\"\\nList is empty\\n\"); } else { ptr = head; head = ptr->next; free(ptr); printf(\"\\nNode deleted from the begining ...\\n\"); } } void last_delete() { struct node *ptr,*ptr1; if(head == NULL) { printf(\"\\nlist is empty\"); } else if(head -> next == NULL) { head = NULL; free(head); printf(\"\\nOnly node of the list deleted ...\\n\"); } else { ptr = head; while(ptr->next != NULL) { ptr1 = ptr; ptr = ptr ->next; } ptr1->next = NULL; free(ptr); printf(\"\\nDeleted Node from the last ...\\n\"); } } void random_delete() { struct node *ptr,*ptr1; int loc,i; printf(\"\\n Enter the location of the node after which you want to perform deletion \\n\"); scanf(\"%d\",&loc); ptr=head; for(i=0;i<loc;i++) { ptr1 = ptr; ptr = ptr->next; if(ptr == NULL) { printf(\"\\nCan't delete\"); return; } } ptr1 ->next = ptr ->next; free(ptr); printf(\"\\nDeleted node %d \",loc+1); } void search() { struct node *ptr; int item,i=0,flag; ptr = head; if(ptr == NULL) { printf(\"\\nEmpty List\\n\"); } else { printf(\"\\nEnter item which you want to search?\\n\"); scanf(\"%d\",&item); while (ptr!=NULL) { if(ptr->data == item) { printf(\"item found at location %d \",i+1); flag=0; } else { flag=1; } i++; ptr = ptr -> next; } if(flag==1) { printf(\"Item not found\\n\"); } } } void display() { struct node *ptr; ptr = head; if(ptr == NULL) { printf(\"Nothing to print\"); } else { printf(\"\\nprinting values . . . . .\\n\"); while (ptr!=NULL) { printf(\"\\n%d\",ptr->data); ptr = ptr -> next; } } } Visit : https://www.geeksforgeeks.org/data-structures/linked-list/ Graphs A graph can be defined as group of vertices and edges that are used to connect these vertices. A graph can be seen as a cyclic tree, where the vertices (Nodes) maintain any complex relationship among them instead of having parent child relationship. Definition A graph G can be defined as an ordered set G(V, E) where V(G) represents the set of vertices and E(G) represents the set of edges which are used to connect these vertices. A Graph G(V, E) with 5 vertices (A, B, C, D, E) and six edges ((A,B), (B,C), (C,E), (E,D), (D,B), (D,A)) is shown in the following figure. Directed and Undirected Graph A graph can be directed or undirected. However, in an undirected graph, edges are not associated with the directions with them. An undirected graph is shown in the above figure since its edges are not attached with any of the directions. If an edge exists between vertex A and B then the vertices can be traversed from B to A as well as A to B. In a directed graph, edges form an ordered pair. Edges represent a specific path from some vertex A to another vertex B. Node A is called initial node while node B is called terminal node. A directed graph is shown in the following figure. Visit : https://www.geeksforgeeks.org/graph-data-structure-and-algorithms/ Trees We read the linear data structures like an array, linked list, stack and queue in which all the elements are arranged in a sequential manner. The different data structures are used for different kinds of data. A tree is also one of the data structures that represent hierarchical data. Suppose we want to show the employees and their positions in the hierarchical form then it can be represented as shown below: Some basic terms used in Tree data structure. Root : The root node is the topmost node in the tree hierarchy. In other words, the root node is the one that doesn't have any parent. In the above structure, node numbered 1 is the root node of the tree. If a node is directly linked to some other node, it would be called a parent-child relationship. Child node : If the node is a descendant of any node, then the node is known as a child node. Parent : If the node contains any sub-node, then that node is said to be the parent of that sub-node. Sibling : The nodes that have the same parent are known as siblings. Leaf Node :- The node of the tree, which doesn't have any child node, is called a leaf node. A leaf node is the bottom-most node of the tree. There can be any number of leaf nodes present in a general tree. Leaf nodes can also be called external nodes. Internal nodes : A node has atleast one child node known as an internal Ancestor node :- An ancestor of a node is any predecessor node on a path from the root to that node. The root node doesn't have any ancestors. In the tree shown in the above image, nodes 1, 2, and 5 are the ancestors of node 10. Descendant : The immediate successor of the given node is known as a descendant of a node. In the above figure, 10 is the descendant of node 5. Visit : https://www.geeksforgeeks.org/binary-tree-data-structure/","title":"3: Data Structures"},{"location":"03-data-structures/#data-structures","text":"A data structure is a particular way of organizing data in a computer so that it can be used effectively. The data structure name indicates itself that organizing the data in memory.The data structure is not any programming language like C, C++, java, etc. It is a set of algorithms that we can use in any programming language to structure the data in the memory. To structure the data in memory, 'n' number of algorithms were proposed, and all these algorithms are known as Abstract data types. These abstract data types are the set of rules.","title":"Data Structures"},{"location":"03-data-structures/#types-of-data-structures","text":"The Data Structures can be divided as follows: * Primitive * Non-Primitive Another Classification for Data Structures can be as follows: * Static Data Structure : It is a type of data structure where the size is allocated at the compile time. Therefore, the maximum size is fixed. * Dynamic Data Structure : It is a type of data structure where the size is allocated at the run time. Therefore, the maximum size is flexible.","title":"Types Of Data Structures"},{"location":"03-data-structures/#operations-on-a-data-structure","text":"Searching : We can search for any element in a data structure. Sorting : We can sort the elements of a data structure either in an ascending or descending order. Insertion : We can also insert the new element in a data structure. Updation : We can also update the element, i.e., we can replace the element with another element. Deletion : We can also perform the delete operation to remove the element from the data structure.","title":"Operations On A Data Structure"},{"location":"03-data-structures/#advantages-of-data-structures","text":"The following are the advantages of a data structure : Efficiency : If the choice of a data structure for implementing a particular ADT is proper, it makes the program very efficient in terms of time and space. Reusability : The data structure provides reusability means that multiple client programs can use the data structure. Abstraction : The data structure specified by an ADT also provides the level of abstraction. The client cannot see the internal working of the data structure, so it does not have to worry about the implementation part. The client can only see the interface.","title":"Advantages Of Data Structures"},{"location":"03-data-structures/#primitive-ds","text":"The primitive data structures are primitive data types. The int, char, float, double, and pointer are the primitive data structures that can hold a single value. We have already discussed about these and their use and application in the OOPS part.","title":"Primitive DS"},{"location":"03-data-structures/#non-primitive-ds","text":"Linear DS : The arrangement of data in a sequential manner is known as a linear data structure. The data structures used for this purpose are Arrays, Linked list, Stacks, and Queues. In these data structures, one element is connected to only one another element in a linear form. Non-Linear DS : When one element is connected to the 'n' number of elements known as a non-linear data structure. The best example is trees and graphs. In this case, the elements are arranged in a random manner. We will discuss the above data structures in brief in the coming topics.","title":"Non-Primitive DS"},{"location":"03-data-structures/#array","text":"Arrays are defined as the collection of similar type of data items stored at contiguous memory locations. Arrays are the derived data type in C programming language which can store the primitive type of data such as int, char, double, float, etc. Array is the simplest data structure where each data element can be randomly accessed by using its index number. For example, if we want to store the marks of a student in 6 subjects, then we don't need to define different variable for the marks in different subject. instead of that, we can define an array which can store the marks in each subject at a the contiguous memory locations. #include <stdio.h> void main () { int marks[6] = {56,78,88,76,56,89); int i; float avg; for (i=0; i<6; i++ ) { avg = avg + marks[i]; } printf(avg); } int x = a[i][j]; for ( int i=0; i<n ;i++) { for (int j=0; j<n; j++) { a[i][j] = 0; } } Visit : https://www.geeksforgeeks.org/array-data-structure/","title":"Array"},{"location":"03-data-structures/#queue","text":"A queue can be defined as an ordered list which enables insert operations to be performed at one end called REAR and delete operations to be performed at another end called FRONT. Queue is referred to be as First In First Out list. For example, people waiting in line for a rail ticket form a queue. Due to the fact that queue performs actions on first in first out basis which is quite fair for the ordering of actions. There are various applications of queues discussed as below. Queues are widely used as waiting lists for a single shared resource like printer, disk, CPU. Queues are used in asynchronous transfer of data (where data is not being transferred at the same rate between two processes) for eg. pipes, file IO, sockets. Queues are used as buffers in most of the applications like MP3 media player, CD player, etc. Queue are used to maintain the play list in media players in order to add and remove the songs from the play-list. Queues are used in operating systems for handling interrupts.","title":"Queue"},{"location":"03-data-structures/#operations-on-queue","text":"There are two fundamental operations performed on a Queue: Enqueue : The enqueue operation is used to insert the element at the rear end of the queue. It returns void. Dequeue : The dequeue operation performs the deletion from the front-end of the queue. It also returns the element which has been removed from the front-end. It returns an integer value. The dequeue operation can also be designed to void. Peek : This is the third operation that returns the element, which is pointed by the front pointer in the queue but does not delete it. Queue overflow (isfull) : When the Queue is completely full, then it shows the overflow condition. Queue underflow (isempty) : When the Queue is empty, i.e., no elements are in the Queue then it throws the underflow condition. // C program for array implementation of queue #include <limits.h> #include <stdio.h> #include <stdlib.h> // A structure to represent a queue struct Queue { int front, rear, size; unsigned capacity; int* array; }; // function to create a queue // of given capacity. // It initializes size of queue as 0 struct Queue* createQueue(unsigned capacity) { struct Queue* queue = (struct Queue*)malloc( sizeof(struct Queue)); queue->capacity = capacity; queue->front = queue->size = 0; // This is important, see the enqueue queue->rear = capacity - 1; queue->array = (int*)malloc( queue->capacity * sizeof(int)); return queue; } // Queue is full when size becomes // equal to the capacity int isFull(struct Queue* queue) { return (queue->size == queue->capacity); } // Queue is empty when size is 0 int isEmpty(struct Queue* queue) { return (queue->size == 0); } // Function to add an item to the queue. // It changes rear and size void enqueue(struct Queue* queue, int item) { if (isFull(queue)) return; queue->rear = (queue->rear + 1) % queue->capacity; queue->array[queue->rear] = item; queue->size = queue->size + 1; printf(\"%d enqueued to queue\\n\", item); } // Function to remove an item from queue. // It changes front and size int dequeue(struct Queue* queue) { if (isEmpty(queue)) return INT_MIN; int item = queue->array[queue->front]; queue->front = (queue->front + 1) % queue->capacity; queue->size = queue->size - 1; return item; } // Function to get front of queue int front(struct Queue* queue) { if (isEmpty(queue)) return INT_MIN; return queue->array[queue->front]; } // Function to get rear of queue int rear(struct Queue* queue) { if (isEmpty(queue)) return INT_MIN; return queue->array[queue->rear]; } // Driver program to test above functions./ int main() { struct Queue* queue = createQueue(1000); enqueue(queue, 10); enqueue(queue, 20); enqueue(queue, 30); enqueue(queue, 40); printf(\"%d dequeued from queue\\n\\n\", dequeue(queue)); printf(\"Front item is %d\\n\", front(queue)); printf(\"Rear item is %d\\n\", rear(queue)); return 0; }","title":"Operations on Queue"},{"location":"03-data-structures/#types-of-queue","text":"Linear Queue In Linear Queue, an insertion takes place from one end while the deletion occurs from another end. The end at which the insertion takes place is known as the rear end, and the end at which the deletion takes place is known as front end. It strictly follows the FIFO rule. The linear Queue can be represented, as shown in the below figure: Circular Queue In Circular Queue, all the nodes are represented as circular. It is similar to the linear Queue except that the last element of the queue is connected to the first element. It is also known as Ring Buffer as all the ends are connected to another end. The circular queue can be represented as: Priority Queue A priority queue is another special type of Queue data structure in which each element has some priority associated with it. Based on the priority of the element, the elements are arranged in a priority queue. If the elements occur with the same priority, then they are served according to the FIFO principle. Deque (Double Ended Queue) Both the Linear Queue and Deque are different as the linear queue follows the FIFO principle whereas, deque does not follow the FIFO principle. In Deque, the insertion and deletion can occur from both ends. Visit : https://www.geeksforgeeks.org/queue-data-structure/","title":"Types of Queue"},{"location":"03-data-structures/#stack","text":"A Stack is a linear data structure that follows the LIFO (Last-In-First-Out) principle. Stack has one end, whereas the Queue has two ends (front and rear) . It contains only one pointer top pointer pointing to the topmost element of the stack. Whenever an element is added in the stack, it is added on the top of the stack, and the element can be deleted only from the stack. In other words, a stack can be defined as a container in which insertion and deletion can be done from the one end known as the top of the stack. Some key points related to stack - It is called as stack because it behaves like a real-world stack, piles of books, etc. - A Stack is an abstract data type with a pre-defined capacity, which means that it can store the elements of a limited size. - It is a data structure that follows some order to insert and delete the elements, and that order can be LIFO or FILO.","title":"Stack"},{"location":"03-data-structures/#standard-stack-operations","text":"The following are some common operations implemented on the stack: push() : When we insert an element in a stack then the operation is known as a push. If the stack is full then the overflow condition occurs. pop() : When we delete an element from the stack, the operation is known as a pop. If the stack is empty means that no element exists in the stack, this state is known as an underflow state. isEmpty() : It determines whether the stack is empty or not. isFull() : It determines whether the stack is full or not.' peek() : It returns the element at the given position. count() : It returns the total number of elements available in a stack. change() : It changes the element at the given position. display() : It prints all the elements available in the stack.","title":"Standard Stack Operations"},{"location":"03-data-structures/#applications-of-stack","text":"Balancing of symbols : Stack is used for balancing a symbol. As we know, each program has an opening and closing braces; when the opening braces come, we push the braces in a stack, and when the closing braces appear, we pop the opening braces from the stack. Therefore, the net value comes out to be zero. If any symbol is left in the stack, it means that some syntax occurs in a program. String reversal: Stack is also used for reversing a string. For example, we want to reverse a \"javaTpoint\" string, so we can achieve this with the help of a stack. First, we push all the characters of the string in a stack until we reach the null character. After pushing all the characters, we start taking out the character one by one until we reach the bottom of the stack. UNDO/REDO: It can also be used for performing UNDO/REDO operations. For example, we have an editor in which we write 'a', then 'b', and then 'c'; therefore, the text written in an editor is abc. So, there are three states, a, ab, and abc, which are stored in a stack. There would be two stacks in which one stack shows UNDO state, and the other shows REDO state. If we want to perform UNDO operation, and want to achieve 'ab' state, then we implement pop operation. Recursion: The recursion means that the function is calling itself again. To maintain the previous states, the compiler creates a system stack in which all the previous records of the function are maintained. DFS(Depth First Search): This search is implemented on a Graph, and Graph uses the stack data structure. Backtracking: Suppose we have to create a path to solve a maze problem. If we are moving in a particular path, and we realize that we come on the wrong way. In order to come at the beginning of the path to create a new path, we have to use the stack data structure. Expression conversion: Stack can also be used for expression conversion. This is one of the most important applications of stack. Memory management: The stack manages the memory. The memory is assigned in the contiguous memory blocks. The memory is known as stack memory as all the variables are assigned in a function call stack memory. The memory size assigned to the program is known to the compiler. When the function is created, all its variables are assigned in the stack memory. When the function completed its execution, all the variables assigned in the stack are released. // C program for array implementation of stack #include <limits.h> #include <stdio.h> #include <stdlib.h> // A structure to represent a stack struct Stack { int top; unsigned capacity; int* array; }; // function to create a stack of given capacity. It initializes size of // stack as 0 struct Stack* createStack(unsigned capacity) { struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack)); stack->capacity = capacity; stack->top = -1; stack->array = (int*)malloc(stack->capacity * sizeof(int)); return stack; } // Stack is full when top is equal to the last index int isFull(struct Stack* stack) { return stack->top == stack->capacity - 1; } // Stack is empty when top is equal to -1 int isEmpty(struct Stack* stack) { return stack->top == -1; } // Function to add an item to stack. It increases top by 1 void push(struct Stack* stack, int item) { if (isFull(stack)) return; stack->array[++stack->top] = item; printf(\"%d pushed to stack\\n\", item); } // Function to remove an item from stack. It decreases top by 1 int pop(struct Stack* stack) { if (isEmpty(stack)) return INT_MIN; return stack->array[stack->top--]; } // Function to return the top from stack without removing it int peek(struct Stack* stack) { if (isEmpty(stack)) return INT_MIN; return stack->array[stack->top]; } // Driver program to test above functions int main() { struct Stack* stack = createStack(100); push(stack, 10); push(stack, 20); push(stack, 30); printf(\"%d popped from stack\\n\", pop(stack)); return 0; } Visit : https://www.geeksforgeeks.org/stack-data-structure/","title":"Applications of Stack"},{"location":"03-data-structures/#linked-list","text":"Linked List can be defined as collection of objects called nodes that are randomly stored in the memory. A node contains two fields i.e. data stored at that particular address and the pointer which contains the address of the next node in the memory. The last node of the list contains pointer to the null.","title":"Linked List"},{"location":"03-data-structures/#uses-of-linked-list","text":"The list is not required to be contiguously present in the memory. The node can reside any where in the memory and linked together to make a list. This achieves optimized utilization of space. list size is limited to the memory size and doesn't need to be declared in advance. Empty node can not be present in the linked list. We can store values of primitive types or objects in the singly linked list. struct node { int data; struct node *next; }; struct node *head, *ptr; ptr = (struct node *)malloc(sizeof(struct node *));","title":"Uses of Linked List"},{"location":"03-data-structures/#linked-list-in-c-menu-driven-program","text":"#include<stdio.h> #include<stdlib.h> struct node { int data; struct node *next; }; struct node *head; void beginsert (); void lastinsert (); void randominsert(); void begin_delete(); void last_delete(); void random_delete(); void display(); void search(); void main () { int choice =0; while(choice != 9) { printf(\"\\n\\n*********Main Menu*********\\n\"); printf(\"\\nChoose one option from the following list ...\\n\"); printf(\"\\n===============================================\\n\"); printf(\"\\n1.Insert in begining\\n2.Insert at last\\n3.Insert at any random location\\n4.Delete from Beginning\\n 5.Delete from last\\n6.Delete node after specified location\\n7.Search for an element\\n8.Show\\n9.Exit\\n\"); printf(\"\\nEnter your choice?\\n\"); scanf(\"\\n%d\",&choice); switch(choice) { case 1: beginsert(); break; case 2: lastinsert(); break; case 3: randominsert(); break; case 4: begin_delete(); break; case 5: last_delete(); break; case 6: random_delete(); break; case 7: search(); break; case 8: display(); break; case 9: exit(0); break; default: printf(\"Please enter valid choice..\"); } } } void beginsert() { struct node *ptr; int item; ptr = (struct node *) malloc(sizeof(struct node *)); if(ptr == NULL) { printf(\"\\nOVERFLOW\"); } else { printf(\"\\nEnter value\\n\"); scanf(\"%d\",&item); ptr->data = item; ptr->next = head; head = ptr; printf(\"\\nNode inserted\"); } } void lastinsert() { struct node *ptr,*temp; int item; ptr = (struct node*)malloc(sizeof(struct node)); if(ptr == NULL) { printf(\"\\nOVERFLOW\"); } else { printf(\"\\nEnter value?\\n\"); scanf(\"%d\",&item); ptr->data = item; if(head == NULL) { ptr -> next = NULL; head = ptr; printf(\"\\nNode inserted\"); } else { temp = head; while (temp -> next != NULL) { temp = temp -> next; } temp->next = ptr; ptr->next = NULL; printf(\"\\nNode inserted\"); } } } void randominsert() { int i,loc,item; struct node *ptr, *temp; ptr = (struct node *) malloc (sizeof(struct node)); if(ptr == NULL) { printf(\"\\nOVERFLOW\"); } else { printf(\"\\nEnter element value\"); scanf(\"%d\",&item); ptr->data = item; printf(\"\\nEnter the location after which you want to insert \"); scanf(\"\\n%d\",&loc); temp=head; for(i=0;i<loc;i++) { temp = temp->next; if(temp == NULL) { printf(\"\\ncan't insert\\n\"); return; } } ptr ->next = temp ->next; temp ->next = ptr; printf(\"\\nNode inserted\"); } } void begin_delete() { struct node *ptr; if(head == NULL) { printf(\"\\nList is empty\\n\"); } else { ptr = head; head = ptr->next; free(ptr); printf(\"\\nNode deleted from the begining ...\\n\"); } } void last_delete() { struct node *ptr,*ptr1; if(head == NULL) { printf(\"\\nlist is empty\"); } else if(head -> next == NULL) { head = NULL; free(head); printf(\"\\nOnly node of the list deleted ...\\n\"); } else { ptr = head; while(ptr->next != NULL) { ptr1 = ptr; ptr = ptr ->next; } ptr1->next = NULL; free(ptr); printf(\"\\nDeleted Node from the last ...\\n\"); } } void random_delete() { struct node *ptr,*ptr1; int loc,i; printf(\"\\n Enter the location of the node after which you want to perform deletion \\n\"); scanf(\"%d\",&loc); ptr=head; for(i=0;i<loc;i++) { ptr1 = ptr; ptr = ptr->next; if(ptr == NULL) { printf(\"\\nCan't delete\"); return; } } ptr1 ->next = ptr ->next; free(ptr); printf(\"\\nDeleted node %d \",loc+1); } void search() { struct node *ptr; int item,i=0,flag; ptr = head; if(ptr == NULL) { printf(\"\\nEmpty List\\n\"); } else { printf(\"\\nEnter item which you want to search?\\n\"); scanf(\"%d\",&item); while (ptr!=NULL) { if(ptr->data == item) { printf(\"item found at location %d \",i+1); flag=0; } else { flag=1; } i++; ptr = ptr -> next; } if(flag==1) { printf(\"Item not found\\n\"); } } } void display() { struct node *ptr; ptr = head; if(ptr == NULL) { printf(\"Nothing to print\"); } else { printf(\"\\nprinting values . . . . .\\n\"); while (ptr!=NULL) { printf(\"\\n%d\",ptr->data); ptr = ptr -> next; } } } Visit : https://www.geeksforgeeks.org/data-structures/linked-list/","title":"Linked List in C: Menu Driven Program"},{"location":"03-data-structures/#graphs","text":"A graph can be defined as group of vertices and edges that are used to connect these vertices. A graph can be seen as a cyclic tree, where the vertices (Nodes) maintain any complex relationship among them instead of having parent child relationship.","title":"Graphs"},{"location":"03-data-structures/#definition","text":"A graph G can be defined as an ordered set G(V, E) where V(G) represents the set of vertices and E(G) represents the set of edges which are used to connect these vertices. A Graph G(V, E) with 5 vertices (A, B, C, D, E) and six edges ((A,B), (B,C), (C,E), (E,D), (D,B), (D,A)) is shown in the following figure.","title":"Definition"},{"location":"03-data-structures/#directed-and-undirected-graph","text":"A graph can be directed or undirected. However, in an undirected graph, edges are not associated with the directions with them. An undirected graph is shown in the above figure since its edges are not attached with any of the directions. If an edge exists between vertex A and B then the vertices can be traversed from B to A as well as A to B. In a directed graph, edges form an ordered pair. Edges represent a specific path from some vertex A to another vertex B. Node A is called initial node while node B is called terminal node. A directed graph is shown in the following figure. Visit : https://www.geeksforgeeks.org/graph-data-structure-and-algorithms/","title":"Directed and Undirected Graph"},{"location":"03-data-structures/#trees","text":"We read the linear data structures like an array, linked list, stack and queue in which all the elements are arranged in a sequential manner. The different data structures are used for different kinds of data. A tree is also one of the data structures that represent hierarchical data. Suppose we want to show the employees and their positions in the hierarchical form then it can be represented as shown below:","title":"Trees"},{"location":"03-data-structures/#some-basic-terms-used-in-tree-data-structure","text":"Root : The root node is the topmost node in the tree hierarchy. In other words, the root node is the one that doesn't have any parent. In the above structure, node numbered 1 is the root node of the tree. If a node is directly linked to some other node, it would be called a parent-child relationship. Child node : If the node is a descendant of any node, then the node is known as a child node. Parent : If the node contains any sub-node, then that node is said to be the parent of that sub-node. Sibling : The nodes that have the same parent are known as siblings. Leaf Node :- The node of the tree, which doesn't have any child node, is called a leaf node. A leaf node is the bottom-most node of the tree. There can be any number of leaf nodes present in a general tree. Leaf nodes can also be called external nodes. Internal nodes : A node has atleast one child node known as an internal Ancestor node :- An ancestor of a node is any predecessor node on a path from the root to that node. The root node doesn't have any ancestors. In the tree shown in the above image, nodes 1, 2, and 5 are the ancestors of node 10. Descendant : The immediate successor of the given node is known as a descendant of a node. In the above figure, 10 is the descendant of node 5. Visit : https://www.geeksforgeeks.org/binary-tree-data-structure/","title":"Some basic terms used in Tree data structure."}]}